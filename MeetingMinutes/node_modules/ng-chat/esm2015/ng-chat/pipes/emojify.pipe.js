/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
/** @type {?} */
let emojiDictionary = [
    { patterns: [':)', ':-)', '=)'], unicode: '😃' },
    { patterns: [':D', ':-D', '=D'], unicode: '😀' },
    { patterns: [':(', ':-(', '=('], unicode: '🙁' },
    { patterns: [':|', ':-|', '=|'], unicode: '😐' },
    { patterns: [':*', ':-*', '=*'], unicode: '😙' },
    { patterns: ['T_T', 'T.T'], unicode: '😭' },
    { patterns: [':O', ':-O', '=O', ':o', ':-o', '=o'], unicode: '😮' },
    { patterns: [':P', ':-P', '=P', ':p', ':-p', '=p'], unicode: '😋' },
    { patterns: ['>.<'], unicode: '😣' },
    { patterns: ['@.@'], unicode: '😵' },
    { patterns: ['*.*'], unicode: '😍' },
    { patterns: ['<3'], unicode: '❤️' },
    { patterns: ['^.^'], unicode: '😊' },
    { patterns: [':+1'], unicode: '👍' },
    { patterns: [':-1'], unicode: '👎' }
];
/*
 * Transforms common emoji text to UTF encoded emojis
*/
export class EmojifyPipe {
    /**
     * @param {?} message
     * @param {?} pipeEnabled
     * @return {?}
     */
    transform(message, pipeEnabled) {
        if (pipeEnabled && message && message.length > 1) {
            emojiDictionary.forEach(emoji => {
                emoji.patterns.forEach(pattern => {
                    message = message.replace(pattern, emoji.unicode);
                });
            });
        }
        return message;
    }
}
EmojifyPipe.decorators = [
    { type: Pipe, args: [{ name: 'emojify' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1vamlmeS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY2hhdC8iLCJzb3VyY2VzIjpbIm5nLWNoYXQvcGlwZXMvZW1vamlmeS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7SUFFaEQsZUFBZSxHQUFHO0lBQ2xCLEVBQUUsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQ2hELEVBQUUsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQ2hELEVBQUUsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQ2hELEVBQUUsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQ2hELEVBQUUsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQ2hELEVBQUUsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7SUFDM0MsRUFBRSxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7SUFDbkUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7SUFDbkUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQ3BDLEVBQUUsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtJQUNwQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7SUFDcEMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQ25DLEVBQUUsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtJQUNwQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7SUFDcEMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO0NBQ3ZDOzs7O0FBTUQsTUFBTSxPQUFPLFdBQVc7Ozs7OztJQUNwQixTQUFTLENBQUMsT0FBZSxFQUFFLFdBQW9CO1FBQzNDLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM5QyxlQUFlLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM1QixLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDN0IsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDdEQsQ0FBQyxDQUFDLENBQUE7WUFDTixDQUFDLENBQUMsQ0FBQztTQUNOO1FBRUwsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7O1lBWkYsSUFBSSxTQUFDLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmxldCBlbW9qaURpY3Rpb25hcnkgPSBbXHJcbiAgICB7IHBhdHRlcm5zOiBbJzopJywgJzotKScsICc9KSddLCB1bmljb2RlOiAn8J+YgycgfSxcclxuICAgIHsgcGF0dGVybnM6IFsnOkQnLCAnOi1EJywgJz1EJ10sIHVuaWNvZGU6ICfwn5iAJyB9LFxyXG4gICAgeyBwYXR0ZXJuczogWyc6KCcsICc6LSgnLCAnPSgnXSwgdW5pY29kZTogJ/CfmYEnIH0sXHJcbiAgICB7IHBhdHRlcm5zOiBbJzp8JywgJzotfCcsICc9fCddLCB1bmljb2RlOiAn8J+YkCcgfSxcclxuICAgIHsgcGF0dGVybnM6IFsnOionLCAnOi0qJywgJz0qJ10sIHVuaWNvZGU6ICfwn5iZJyB9LFxyXG4gICAgeyBwYXR0ZXJuczogWydUX1QnLCAnVC5UJ10sIHVuaWNvZGU6ICfwn5itJyB9LFxyXG4gICAgeyBwYXR0ZXJuczogWyc6TycsICc6LU8nLCAnPU8nLCAnOm8nLCAnOi1vJywgJz1vJ10sIHVuaWNvZGU6ICfwn5iuJyB9LFxyXG4gICAgeyBwYXR0ZXJuczogWyc6UCcsICc6LVAnLCAnPVAnLCAnOnAnLCAnOi1wJywgJz1wJ10sIHVuaWNvZGU6ICfwn5iLJyB9LFxyXG4gICAgeyBwYXR0ZXJuczogWyc+LjwnXSwgdW5pY29kZTogJ/CfmKMnIH0sXHJcbiAgICB7IHBhdHRlcm5zOiBbJ0AuQCddLCB1bmljb2RlOiAn8J+YtScgfSxcclxuICAgIHsgcGF0dGVybnM6IFsnKi4qJ10sIHVuaWNvZGU6ICfwn5iNJyB9LFxyXG4gICAgeyBwYXR0ZXJuczogWyc8MyddLCB1bmljb2RlOiAn4p2k77iPJyB9LFxyXG4gICAgeyBwYXR0ZXJuczogWydeLl4nXSwgdW5pY29kZTogJ/CfmIonIH0sXHJcbiAgICB7IHBhdHRlcm5zOiBbJzorMSddLCB1bmljb2RlOiAn8J+RjScgfSxcclxuICAgIHsgcGF0dGVybnM6IFsnOi0xJ10sIHVuaWNvZGU6ICfwn5GOJyB9XHJcbl07XHJcblxyXG4vKlxyXG4gKiBUcmFuc2Zvcm1zIGNvbW1vbiBlbW9qaSB0ZXh0IHRvIFVURiBlbmNvZGVkIGVtb2ppc1xyXG4qL1xyXG5AUGlwZSh7bmFtZTogJ2Vtb2ppZnknfSlcclxuZXhwb3J0IGNsYXNzIEVtb2ppZnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgICB0cmFuc2Zvcm0obWVzc2FnZTogc3RyaW5nLCBwaXBlRW5hYmxlZDogYm9vbGVhbik6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHBpcGVFbmFibGVkICYmIG1lc3NhZ2UgJiYgbWVzc2FnZS5sZW5ndGggPiAxKSB7ICBcclxuICAgICAgICAgICAgZW1vamlEaWN0aW9uYXJ5LmZvckVhY2goZW1vamkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZW1vamkucGF0dGVybnMuZm9yRWFjaChwYXR0ZXJuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKHBhdHRlcm4sIGVtb2ppLnVuaWNvZGUpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIHJldHVybiBtZXNzYWdlO1xyXG4gIH1cclxufVxyXG4iXX0=