{"version":3,"sources":["ng://ng-chat/ng-chat/core/chat-adapter.ts","ng://ng-chat/ng-chat/core/message-type.enum.ts","ng://ng-chat/ng-chat/core/message.ts","ng://ng-chat/ng-chat/core/chat-participant-status.enum.ts","ng://ng-chat/ng-chat/core/chat-participant-type.enum.ts","ng://ng-chat/ng-chat/core/user.ts","ng://ng-chat/ng-chat/core/participant-response.ts","ng://ng-chat/ng-chat/core/participant-metadata.ts","ng://ng-chat/ng-chat/core/window.ts","node_modules/tslib/tslib.es6.js","ng://ng-chat/ng-chat/core/paged-history-chat-adapter.ts","ng://ng-chat/ng-chat/core/theme.enum.ts","ng://ng-chat/ng-chat/core/guid.ts","ng://ng-chat/ng-chat/core/group.ts","ng://ng-chat/ng-chat/core/scroll-direction.enum.ts","ng://ng-chat/ng-chat/core/default-file-upload-adapter.ts","ng://ng-chat/ng-chat/ng-chat.component.ts","ng://ng-chat/ng-chat/pipes/emojify.pipe.ts","ng://ng-chat/ng-chat/pipes/linkfy.pipe.ts","ng://ng-chat/ng-chat/pipes/sanitize.pipe.ts","ng://ng-chat/ng-chat/pipes/group-message-display-name.pipe.ts","ng://ng-chat/ng-chat/components/ng-chat-options/ng-chat-options.component.ts","ng://ng-chat/ng-chat/ng-chat.module.ts"],"names":["ChatAdapter","prototype","onFriendsListChanged","participantsResponse","this","friendsListChangedHandler","onMessageReceived","participant","message","messageReceivedHandler","Text","File","Message","type","MessageType","Online","Busy","Away","Offline","User","Group","participantType","ChatParticipantType","ParticipantResponse","ParticipantMetadata","totalUnreadMessages","Window","isLoadingHistory","isCollapsed","messages","newMessage","hasFocus","hasMoreMessages","historyPage","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","n","v","step","op","TypeError","call","done","value","pop","length","push","e","__extends","__","constructor","create","tslib_1.__extends","PagedHistoryChatAdapter","Custom","Light","Dark","Guid","newGuid","replace","c","r","Math","random","toString","participants","id","chattingTo","status","ChatParticipantStatus","displayName","map","sort","first","second","join","Top","Bottom","DefaultFileUploadAdapter","uploadFile","file","participantId","formData","FormData","append","name","_http","post","_serverEndpointUrl","defineProperty","NgChat","_isDisabled","window","clearInterval","pollingIntervalWindowInstance","activateFriendListFetch","defaultWindowOptions","currentWindow","_this","groupAdapter","isActive","action","chattingWindow","selectedUsersFromFriendsList","concat","validateContext","displayLabel","userId","searchInput","filter","x","toUpperCase","includes","ngOnInit","bootstrapChat","onResize","event","viewPortTotalArea","target","innerWidth","NormalizeWindows","maxSupportedOpenedWindows","floor","hideFriendsList","friendsListWidth","windowSizeFactor","difference","windows","splice","updateWindowsState","unsupportedViewport","isViewportOnMobileEnabled","hideFriendsListOnUnsupportedViewport","initializationException","adapter","initializeTheme","initializeDefaultText","initializeBrowserNotifications","msg","bufferAudioFile","hasPagedHistory","fileUploadUrl","fileUploadAdapter","_httpClient","isBootstrapped","ex","console","error","pollFriendsList","fetchFriendsList","setInterval","pollingInterval","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","rejected","result","then","apply","browserNotificationsEnabled","Notification","requestPermission","_a","browserNotificationsBootstrapped","localization","messagePlaceholder","searchPlaceholder","title","statusDescription","browserNotificationTitle","loadMessageHistoryPlaceholder","customTheme","theme","Theme","Error","isBootstrapping","listFriends","pipe","response","subscribe","restoreWindowsState","fetchMessageHistory","getMessageHistoryByPage","historyPageSize","forEach","assertMessageType","direction","ScrollDirection","setTimeout","onFetchMessageHistoryLoaded","getMessageHistory","forceMarkMessagesAsSeen","scrollChatWindow","unseenMessages","m","dateSeen","markMessagesAsRead","onMessagesSeen","emit","participantsInteractedWith","chatWindow","openChatWindow","historyEnabled","emitMessageSound","maximizeWindowOnNewMessage","emitBrowserNotification","focusOnNewWindow","invokedByUserClick","openedWindow","find","onParticipantClicked","collapseWindow","newChatWindow","unshift","focusOnWindow","onParticipantChatOpened","callback","windowIndex","indexOf","chatWindowInputs","toArray","nativeElement","focus","windowIndex_1","chatMessageClusters","element","position","scrollHeight","scrollTop","currentDate","Date","audioSource","audioFile","Audio","src","load","audioEnabled","play","notification_1","icon","browserNotificationIconSource","close","persistWindowsState","participantIds","w","localStorage","setItem","localStorageKey","JSON","stringify","stringfiedParticipantIds","getItem","participantIds_1","parse","u","getClosestWindow","index","formatUnreadMessagesTotal","String","unreadMessagesTotal","fromId","unreadMessagesTotalByParticipant","metadata","participantResponse","onChatInputTyped","keyCode","trim","toId","dateSent","sendMessage","preventDefault","currentWindowIndex","messageInputToFocus","shiftKey","closestWindow","onCloseChatWindow","onParticipantChatClosed","onChatTitleClicked","onChatWindowClicked","isAvatarVisible","getChatWindowAvatar","avatar","group","userIndex","findIndex","toggleWindowFocus","unreadMessages","getStatusTitle","currentStatus","toLowerCase","triggerOpenChatWindow","user","triggerCloseChatWindow","triggerToggleChatWindowVisibility","getUniqueFileUploadInstanceId","triggerNativeFileUpload","fileUploadInstanceId_1","uploadElementRef","nativeFileInputs","click","clearInUseFileUploader","fileUploadInstanceId","uploaderInstanceIdIndex","fileUploadersInUse","isUploadingFile","onFileChosen","files","fileMessage","onFriendsListCheckboxChange","selectedUser","isChecked","onFriendsListActionCancelClicked","currentActiveOption","onFriendsListActionConfirmClicked","newGroup","groupCreated","isUserSelectedFromFriendsList","item","Component","args","selector","template","encapsulation","ViewEncapsulation","None","HttpClient","Input","Output","ViewChildren","HostListener","emojisEnabled","linkfyEnabled","searchEnabled","messageDatePipeFormat","showMessageDate","EventEmitter","online","busy","away","offline","emojiDictionary","patterns","unicode","EmojifyPipe","transform","pipeEnabled","emoji","pattern","Pipe","LinkfyPipe","replacePatternProtocol","replacePatternWWW","replacePatternMailTo","SanitizePipe","url","sanitizer","bypassSecurityTrustResourceUrl","DomSanitizer","GroupMessageDisplayNamePipe","NgChatOptionsComponent","onOptionClicked","option","activeOptionTrackerChange","NgChatModule","NgModule","imports","CommonModule","FormsModule","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { Message } from \"./message\";\r\nimport { User } from \"./user\";\r\nimport { ParticipantResponse } from \"./participant-response\";\r\nimport { IChatParticipant } from './chat-participant';\r\n\r\nexport abstract class ChatAdapter\r\n{\r\n    // ### Abstract adapter methods ###\r\n\r\n    public abstract listFriends(): Observable<ParticipantResponse[]>;\r\n    \r\n    public abstract getMessageHistory(destinataryId: any): Observable<Message[]>;\r\n\r\n    public abstract sendMessage(message: Message): void;\r\n\r\n    // ### Adapter/Chat income/ingress events ###\r\n\r\n    public onFriendsListChanged(participantsResponse: ParticipantResponse[]): void\r\n    {\r\n        this.friendsListChangedHandler(participantsResponse);\r\n    }\r\n\r\n    public onMessageReceived(participant: IChatParticipant, message: Message): void\r\n    {\r\n        this.messageReceivedHandler(participant, message);\r\n    }\r\n    \r\n    // Event handlers\r\n    friendsListChangedHandler: (participantsResponse: ParticipantResponse[]) => void  = (participantsResponse: ParticipantResponse[]) => {};\r\n    messageReceivedHandler: (participant: IChatParticipant, message: Message) => void = (participant: IChatParticipant, message: Message) => {};\r\n}\r\n","export enum MessageType\r\n{\r\n    Text = 1,\r\n    File = 2\r\n}\r\n","import { MessageType } from './message-type.enum';\r\n\r\nexport class Message\r\n{\r\n    public type?: MessageType = MessageType.Text;\r\n    public fromId: any;\r\n    public toId: any;\r\n    public message: string;\r\n    public dateSent?: Date;\r\n    public dateSeen?: Date;\r\n}\r\n","export enum ChatParticipantStatus\r\n{\r\n    Online,\r\n    Busy,\r\n    Away,\r\n    Offline\r\n}\r\n","export enum ChatParticipantType\r\n{\r\n    User,\r\n    Group\r\n}\r\n","import { ChatParticipantStatus } from \"./chat-participant-status.enum\";\r\nimport { IChatParticipant } from \"./chat-participant\";\r\nimport { ChatParticipantType } from \"./chat-participant-type.enum\";\r\n\r\nexport class User implements IChatParticipant\r\n{\r\n    public readonly participantType: ChatParticipantType = ChatParticipantType.User;\r\n    public id: any;\r\n    public displayName: string;\r\n    public status: ChatParticipantStatus;\r\n    public avatar: string;\r\n}\r\n","import { User } from \"./user\";\r\nimport { ParticipantMetadata } from \"./participant-metadata\";\r\nimport { IChatParticipant } from \"./chat-participant\";\r\n\r\nexport class ParticipantResponse\r\n{\r\n    public participant: IChatParticipant;\r\n    public metadata: ParticipantMetadata;\r\n}\r\n","export class ParticipantMetadata\r\n{\r\n    public totalUnreadMessages: number = 0;\r\n}\r\n","import { Message } from \"./message\";\r\nimport { User } from \"./user\";\r\nimport { ChatParticipantType } from \"./chat-participant-type.enum\";\r\nimport { ChatParticipantStatus } from \"./chat-participant-status.enum\";\r\nimport { Group } from \"./group\";\r\nimport { IChatParticipant } from \"./chat-participant\";\r\n\r\nexport class Window\r\n{\r\n    constructor(participant: IChatParticipant, isLoadingHistory: boolean, isCollapsed: boolean)\r\n    {\r\n        this.participant = participant;\r\n        this.messages =  [];\r\n        this.isLoadingHistory = isLoadingHistory;\r\n        this.hasFocus = false; // This will be triggered when the 'newMessage' input gets the current focus\r\n        this.isCollapsed = isCollapsed;\r\n        this.hasMoreMessages = false;\r\n        this.historyPage = 0;\r\n    }\r\n\r\n    public participant: IChatParticipant;    \r\n    public messages: Message[] = [];\r\n    public newMessage?: string = \"\";\r\n\r\n    // UI Behavior properties\r\n    public isCollapsed?: boolean = false; \r\n    public isLoadingHistory: boolean = false;\r\n    public hasFocus: boolean = false;\r\n    public hasMoreMessages: boolean = true;\r\n    public historyPage: number = 0;\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { Message } from \"./message\";\r\nimport { User } from \"./user\";\r\nimport { ChatAdapter } from \"./chat-adapter\";\r\n\r\n/**\r\n * @description Chat Adapter decorator class that adds pagination to load the history of messagesr. \r\n * You will need an existing @see ChatAdapter implementation\r\n */\r\nexport abstract class PagedHistoryChatAdapter extends ChatAdapter\r\n{   \r\n    abstract getMessageHistoryByPage(destinataryId: any, size: number, page: number) : Observable<Message[]>;\r\n}\r\n","export enum Theme\r\n{\r\n    Custom = 'custom-theme',\r\n    Light = 'light-theme',\r\n    Dark = 'dark-theme'\r\n}\r\n","// Poached from: https://github.com/Steve-Fenton/TypeScriptUtilities\r\n// @dynamic\r\nexport class Guid {\r\n    static newGuid() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n}\r\n","import { Guid } from \"./guid\";\r\nimport { User } from \"./user\";\r\nimport { ChatParticipantStatus } from \"./chat-participant-status.enum\";\r\nimport { IChatParticipant } from \"./chat-participant\";\r\nimport { ChatParticipantType } from \"./chat-participant-type.enum\";\r\n\r\nexport class Group implements IChatParticipant\r\n{\r\n    constructor(participants: User[])\r\n    {   \r\n        this.chattingTo = participants;\r\n        this.status = ChatParticipantStatus.Online;\r\n\r\n        // TODO: Add some customization for this in future releases\r\n        this.displayName = participants.map((p) => p.displayName).sort((first, second) => second > first ? -1 : 1).join(\", \");\r\n    }\r\n\r\n    public id: string = Guid.newGuid();\r\n    public chattingTo: User[];\r\n\r\n    public readonly participantType: ChatParticipantType = ChatParticipantType.Group;\r\n\r\n    public status: ChatParticipantStatus;\r\n    public avatar: string | null;\r\n    public displayName: string;\r\n}\r\n","export enum ScrollDirection {\r\n    Top,\r\n    Bottom\r\n}","import { IFileUploadAdapter } from './file-upload-adapter';\r\nimport { HttpClient, HttpRequest, HttpEventType, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { User } from './user';\r\nimport { Message } from './message';\r\n\r\nexport class DefaultFileUploadAdapter implements IFileUploadAdapter\r\n{\r\n    /**\r\n     * @summary Basic file upload adapter implementation for HTTP request form file consumption\r\n     * @param _serverEndpointUrl The API endpoint full qualified address that will receive a form file to process and return the metadata.\r\n     */\r\n    constructor(private _serverEndpointUrl: string, private _http: HttpClient) {\r\n    }\r\n\r\n    uploadFile(file: File, participantId: any): Observable<Message> {\r\n        const formData: FormData = new FormData();\r\n\r\n        //formData.append('ng-chat-sender-userid', currentUserId);\r\n        formData.append('ng-chat-participant-id', participantId);\r\n        formData.append('file', file, file.name);\r\n\r\n        return this._http.post<Message>(this._serverEndpointUrl, formData);\r\n\r\n        // TODO: Leaving this if we want to track upload progress in detail in the future. Might need a different Subject generic type wrapper\r\n        // const fileRequest = new HttpRequest('POST', this._serverEndpointUrl, formData, {\r\n        //     reportProgress: true\r\n        // });\r\n\r\n        // const uploadProgress = new Subject<number>();\r\n        // const uploadStatus = uploadProgress.asObservable();\r\n\r\n        //const responsePromise = new Subject<Message>();\r\n\r\n        // this._http\r\n        //     .request(fileRequest)\r\n        //     .subscribe(event => {\r\n        //         // if (event.type == HttpEventType.UploadProgress)\r\n        //         // {\r\n        //         //     const percentDone = Math.round(100 * event.loaded / event.total);\r\n\r\n        //         //     uploadProgress.next(percentDone);\r\n        //         // }\r\n        //         // else if (event instanceof HttpResponse)\r\n        //         // {\r\n                    \r\n        //         //     uploadProgress.complete();\r\n        //         // }\r\n        //     });\r\n    }\r\n}\r\n","import { Component, Input, OnInit, ViewChildren, ViewChild, HostListener, Output, EventEmitter, ElementRef, ViewEncapsulation } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { ChatAdapter } from './core/chat-adapter';\r\nimport { IChatGroupAdapter } from './core/chat-group-adapter';\r\nimport { User } from \"./core/user\";\r\nimport { ParticipantResponse } from \"./core/participant-response\";\r\nimport { Message } from \"./core/message\";\r\nimport { FileMessage } from \"./core/file-message\";\r\nimport { MessageType } from \"./core/message-type.enum\";\r\nimport { Window } from \"./core/window\";\r\nimport { ChatParticipantStatus } from \"./core/chat-participant-status.enum\";\r\nimport { ScrollDirection } from \"./core/scroll-direction.enum\";\r\nimport { Localization, StatusDescription } from './core/localization';\r\nimport { IChatController } from './core/chat-controller';\r\nimport { PagedHistoryChatAdapter } from './core/paged-history-chat-adapter';\r\nimport { IFileUploadAdapter } from './core/file-upload-adapter';\r\nimport { DefaultFileUploadAdapter } from './core/default-file-upload-adapter';\r\nimport { Theme } from './core/theme.enum';\r\nimport { IChatOption } from './core/chat-option';\r\nimport { Group } from \"./core/group\";\r\nimport { ChatParticipantType } from \"./core/chat-participant-type.enum\";\r\nimport { IChatParticipant } from \"./core/chat-participant\";\r\n\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'ng-chat',\r\n    templateUrl: 'ng-chat.component.html',\r\n    styleUrls: [\r\n        'assets/icons.css',\r\n        'assets/loading-spinner.css',\r\n        'assets/ng-chat.component.default.css',\r\n        'assets/themes/ng-chat.theme.default.scss',\r\n        'assets/themes/ng-chat.theme.dark.scss'\r\n    ],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class NgChat implements OnInit, IChatController {\r\n    constructor(private _httpClient: HttpClient) { }\r\n\r\n    // Exposes enums for the ng-template\r\n    public ChatParticipantType = ChatParticipantType;\r\n    public ChatParticipantStatus = ChatParticipantStatus;\r\n    public MessageType = MessageType;\r\n\r\n    private _isDisabled: boolean = false;\r\n\r\n    get isDisabled(): boolean {\r\n        return this._isDisabled;\r\n    }\r\n      \r\n    @Input()\r\n    set isDisabled(value: boolean) {\r\n        this._isDisabled = value;\r\n\r\n        if (value)\r\n        {\r\n            // To address issue https://github.com/rpaschoal/ng-chat/issues/120\r\n            window.clearInterval(this.pollingIntervalWindowInstance)\r\n        }\r\n        else\r\n        {\r\n            this.activateFriendListFetch();\r\n        }\r\n    }\r\n\r\n    @Input()\r\n    public adapter: ChatAdapter;\r\n\r\n    @Input()\r\n    public groupAdapter: IChatGroupAdapter;\r\n\r\n    @Input()\r\n    public userId: any;\r\n\r\n    @Input()\r\n    public isCollapsed: boolean = false;\r\n\r\n    @Input()\r\n    public maximizeWindowOnNewMessage: boolean = true;\r\n\r\n    @Input()    \r\n    public pollFriendsList: boolean = false;\r\n\r\n    @Input()\r\n    public pollingInterval: number = 5000;\r\n\r\n    @Input()    \r\n    public historyEnabled: boolean = true;\r\n\r\n    @Input()    \r\n    public emojisEnabled: boolean = true;\r\n\r\n    @Input()    \r\n    public linkfyEnabled: boolean = true;\r\n\r\n    @Input()\r\n    public audioEnabled: boolean = true;\r\n\r\n    @Input()\r\n    public searchEnabled: boolean = true;\r\n\r\n    @Input() // TODO: This might need a better content strategy\r\n    public audioSource: string = 'https://raw.githubusercontent.com/rpaschoal/ng-chat/master/src/ng-chat/assets/notification.wav';\r\n\r\n    @Input()\r\n    public persistWindowsState: boolean = true;\r\n\r\n    @Input()\r\n    public title: string = \"Friends\";\r\n\r\n    @Input()\r\n    public messagePlaceholder: string = \"Type a message\";\r\n\r\n    @Input()\r\n    public searchPlaceholder: string = \"Search\";\r\n\r\n    @Input()\r\n    public browserNotificationsEnabled: boolean = true;\r\n\r\n    @Input() // TODO: This might need a better content strategy\r\n    public browserNotificationIconSource: string = 'https://raw.githubusercontent.com/rpaschoal/ng-chat/master/src/ng-chat/assets/notification.png';\r\n\r\n    @Input()\r\n    public browserNotificationTitle: string = \"New message from\";\r\n    \r\n    @Input()\r\n    public historyPageSize: number = 10;\r\n\r\n    @Input()\r\n    public localization: Localization;\r\n\r\n    @Input()\r\n    public hideFriendsList: boolean = false;\r\n\r\n    @Input()\r\n    public hideFriendsListOnUnsupportedViewport: boolean = true;\r\n\r\n    @Input()\r\n    public fileUploadUrl: string;\r\n\r\n    @Input()\r\n    public theme: Theme = Theme.Light;\r\n\r\n    @Input()\r\n    public customTheme: string;\r\n\r\n    @Input()\r\n    public messageDatePipeFormat: string = \"short\";\r\n\r\n    @Input()\r\n    public showMessageDate: boolean = true;\r\n    \r\n    @Input()\r\n    public isViewportOnMobileEnabled: boolean = false;\r\n     \r\n    @Output()\r\n    public onParticipantClicked: EventEmitter<IChatParticipant> = new EventEmitter<IChatParticipant>();\r\n\r\n    @Output()\r\n    public onParticipantChatOpened: EventEmitter<IChatParticipant> = new EventEmitter<IChatParticipant>();\r\n\r\n    @Output()\r\n    public onParticipantChatClosed: EventEmitter<IChatParticipant> = new EventEmitter<IChatParticipant>();\r\n    \r\n    @Output()\r\n    public onMessagesSeen: EventEmitter<Message[]> = new EventEmitter<Message[]>();\r\n\r\n    private browserNotificationsBootstrapped: boolean = false;\r\n\r\n    public hasPagedHistory: boolean = false;\r\n\r\n    // Don't want to add this as a setting to simplify usage. Previous placeholder and title settings available to be used, or use full Localization object.\r\n    private statusDescription: StatusDescription = {\r\n        online: 'Online',\r\n        busy: 'Busy',\r\n        away: 'Away',\r\n        offline: 'Offline'\r\n    };\r\n\r\n    private audioFile: HTMLAudioElement;\r\n\r\n    public searchInput: string = '';\r\n\r\n    protected participants: IChatParticipant[];\r\n\r\n    protected participantsResponse: ParticipantResponse[];\r\n\r\n    private participantsInteractedWith: IChatParticipant[] = [];\r\n\r\n    public currentActiveOption: IChatOption | null;\r\n\r\n    protected selectedUsersFromFriendsList: User[] = [];\r\n\r\n    private pollingIntervalWindowInstance: number;\r\n\r\n    public defaultWindowOptions(currentWindow: Window): IChatOption[]\r\n    {\r\n        if (this.groupAdapter && currentWindow.participant.participantType == ChatParticipantType.User)\r\n        {\r\n            return [{\r\n                isActive: false,\r\n                action: (chattingWindow: Window) => {\r\n                    \r\n                    this.selectedUsersFromFriendsList = this.selectedUsersFromFriendsList.concat(chattingWindow.participant as User);\r\n                },\r\n                validateContext: (participant: IChatParticipant) => {\r\n                    return participant.participantType == ChatParticipantType.User;\r\n                },\r\n                displayLabel: 'Add People' // TODO: Localize this\r\n            }];\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    private get localStorageKey(): string \r\n    {\r\n        return `ng-chat-users-${this.userId}`; // Appending the user id so the state is unique per user in a computer.   \r\n    }; \r\n\r\n    get filteredParticipants(): IChatParticipant[]\r\n    {\r\n        if (this.searchInput.length > 0){\r\n            // Searches in the friend list by the inputted search string\r\n            return this.participants.filter(x => x.displayName.toUpperCase().includes(this.searchInput.toUpperCase()));\r\n        }\r\n\r\n        return this.participants;\r\n    }\r\n\r\n    // Defines the size of each opened window to calculate how many windows can be opened on the viewport at the same time.\r\n    public windowSizeFactor: number = 320;\r\n\r\n    // Total width size of the friends list section\r\n    public friendsListWidth: number = 262;\r\n\r\n    // Available area to render the plugin\r\n    private viewPortTotalArea: number;\r\n    \r\n    // Set to true if there is no space to display at least one chat window and 'hideFriendsListOnUnsupportedViewport' is true\r\n    public unsupportedViewport: boolean = false;\r\n\r\n    // File upload state\r\n    public fileUploadersInUse: string[] = []; // Id bucket of uploaders in use\r\n    public fileUploadAdapter: IFileUploadAdapter;\r\n\r\n    windows: Window[] = [];\r\n\r\n    isBootstrapped: boolean = false;\r\n\r\n    @ViewChildren('chatMessages') chatMessageClusters: any;\r\n\r\n    @ViewChildren('chatWindowInput') chatWindowInputs: any;\r\n\r\n    @ViewChildren('nativeFileInput') nativeFileInputs: ElementRef[];\r\n\r\n    ngOnInit() { \r\n        this.bootstrapChat();\r\n    }\r\n\r\n    @HostListener('window:resize', ['$event'])\r\n    onResize(event: any){\r\n       this.viewPortTotalArea = event.target.innerWidth;\r\n\r\n       this.NormalizeWindows();\r\n    }\r\n\r\n    // Checks if there are more opened windows than the view port can display\r\n    private NormalizeWindows(): void\r\n    {\r\n        let maxSupportedOpenedWindows = Math.floor((this.viewPortTotalArea - (!this.hideFriendsList ? this.friendsListWidth : 0)) / this.windowSizeFactor);\r\n        let difference = this.windows.length - maxSupportedOpenedWindows;\r\n\r\n        if (difference >= 0){\r\n            this.windows.splice(this.windows.length - difference);\r\n        }\r\n\r\n        this.updateWindowsState(this.windows);\r\n\r\n        // Viewport should have space for at least one chat window but should show in mobile if option is enabled.\r\n        this.unsupportedViewport = this.isViewportOnMobileEnabled? false : this.hideFriendsListOnUnsupportedViewport && maxSupportedOpenedWindows < 1;\r\n    }\r\n\r\n    // Initializes the chat plugin and the messaging adapter\r\n    private bootstrapChat(): void\r\n    {\r\n        let initializationException = null;\r\n\r\n        if (this.adapter != null && this.userId != null)\r\n        {\r\n            try\r\n            {\r\n                this.viewPortTotalArea = window.innerWidth;\r\n\r\n                this.initializeTheme();\r\n                this.initializeDefaultText();\r\n                this.initializeBrowserNotifications();\r\n\r\n                // Binding event listeners\r\n                this.adapter.messageReceivedHandler = (participant, msg) => this.onMessageReceived(participant, msg);\r\n                this.adapter.friendsListChangedHandler = (participantsResponse) => this.onFriendsListChanged(participantsResponse);\r\n\r\n                this.activateFriendListFetch();\r\n                \r\n                this.bufferAudioFile();\r\n\r\n                this.hasPagedHistory = this.adapter instanceof PagedHistoryChatAdapter;\r\n                \r\n                if (this.fileUploadUrl && this.fileUploadUrl !== \"\")\r\n                {\r\n                    this.fileUploadAdapter = new DefaultFileUploadAdapter(this.fileUploadUrl, this._httpClient);\r\n                }\r\n\r\n                this.NormalizeWindows();\r\n\r\n                this.isBootstrapped = true;\r\n            }\r\n            catch(ex)\r\n            {\r\n                initializationException = ex;\r\n            }\r\n        }\r\n\r\n        if (!this.isBootstrapped){\r\n            console.error(\"ng-chat component couldn't be bootstrapped.\");\r\n            \r\n            if (this.userId == null){\r\n                console.error(\"ng-chat can't be initialized without an user id. Please make sure you've provided an userId as a parameter of the ng-chat component.\");\r\n            }\r\n            if (this.adapter == null){\r\n                console.error(\"ng-chat can't be bootstrapped without a ChatAdapter. Please make sure you've provided a ChatAdapter implementation as a parameter of the ng-chat component.\");\r\n            }\r\n            if (initializationException)\r\n            {\r\n                console.error(`An exception has occurred while initializing ng-chat. Details: ${initializationException.message}`);\r\n                console.error(initializationException);\r\n            }\r\n        }\r\n    }\r\n\r\n    private activateFriendListFetch(): void {\r\n        if (this.adapter)\r\n        {\r\n            // Loading current users list\r\n            if (this.pollFriendsList){\r\n                // Setting a long poll interval to update the friends list\r\n                this.fetchFriendsList(true);\r\n                this.pollingIntervalWindowInstance = window.setInterval(() => this.fetchFriendsList(false), this.pollingInterval);\r\n            }\r\n            else\r\n            {\r\n                // Since polling was disabled, a friends list update mechanism will have to be implemented in the ChatAdapter.\r\n                this.fetchFriendsList(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Initializes browser notifications\r\n    private async initializeBrowserNotifications()\r\n    {\r\n        if (this.browserNotificationsEnabled && (\"Notification\" in window))\r\n        {\r\n            if (await Notification.requestPermission())\r\n            {\r\n                this.browserNotificationsBootstrapped = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Initializes default text\r\n    private initializeDefaultText() : void\r\n    {\r\n        if (!this.localization)\r\n        {\r\n            this.localization = {\r\n                messagePlaceholder: this.messagePlaceholder,\r\n                searchPlaceholder: this.searchPlaceholder, \r\n                title: this.title,\r\n                statusDescription: this.statusDescription,\r\n                browserNotificationTitle: this.browserNotificationTitle,\r\n                loadMessageHistoryPlaceholder: \"Load older messages\"\r\n            };\r\n        }\r\n    }\r\n\r\n    private initializeTheme(): void\r\n    {\r\n        if (this.customTheme)\r\n        {\r\n            this.theme = Theme.Custom;\r\n        }\r\n        else if (this.theme != Theme.Light && this.theme != Theme.Dark)\r\n        {\r\n            // TODO: Use es2017 in future with Object.values(Theme).includes(this.theme) to do this check\r\n            throw new Error(`Invalid theme configuration for ng-chat. \"${this.theme}\" is not a valid theme value.`);\r\n        }\r\n    }\r\n\r\n    // Sends a request to load the friends list\r\n    private fetchFriendsList(isBootstrapping: boolean): void\r\n    {\r\n        this.adapter.listFriends()\r\n        .pipe(\r\n            map((participantsResponse: ParticipantResponse[]) => {\r\n                this.participantsResponse = participantsResponse;\r\n\r\n                this.participants = participantsResponse.map((response: ParticipantResponse) => {\r\n                    return response.participant;\r\n                });\r\n            })\r\n        ).subscribe(() => {\r\n            if (isBootstrapping)\r\n            {\r\n                this.restoreWindowsState();\r\n            }\r\n        });\r\n    }\r\n\r\n    fetchMessageHistory(window: Window) {\r\n        // Not ideal but will keep this until we decide if we are shipping pagination with the default adapter\r\n        if (this.adapter instanceof PagedHistoryChatAdapter)\r\n        {\r\n            window.isLoadingHistory = true;\r\n\r\n            this.adapter.getMessageHistoryByPage(window.participant.id, this.historyPageSize, ++window.historyPage)\r\n            .pipe(\r\n                map((result: Message[]) => {\r\n                    result.forEach((message) => this.assertMessageType(message));\r\n                    \r\n                    window.messages = result.concat(window.messages);\r\n                    window.isLoadingHistory = false;\r\n    \r\n                    const direction: ScrollDirection = (window.historyPage == 1) ? ScrollDirection.Bottom : ScrollDirection.Top;\r\n                    window.hasMoreMessages = result.length == this.historyPageSize;\r\n                    \r\n                    setTimeout(() => this.onFetchMessageHistoryLoaded(result, window, direction, true));\r\n                })\r\n            ).subscribe();\r\n        }\r\n        else\r\n        {\r\n            this.adapter.getMessageHistory(window.participant.id)\r\n            .pipe(\r\n                map((result: Message[]) => {\r\n                    result.forEach((message) => this.assertMessageType(message));\r\n    \r\n                    window.messages = result.concat(window.messages);\r\n                    window.isLoadingHistory = false;\r\n    \r\n                    setTimeout(() => this.onFetchMessageHistoryLoaded(result, window, ScrollDirection.Bottom));\r\n                })\r\n            ).subscribe();\r\n        }\r\n    }\r\n\r\n    private onFetchMessageHistoryLoaded(messages: Message[], window: Window, direction: ScrollDirection, forceMarkMessagesAsSeen: boolean = false): void \r\n    {\r\n        this.scrollChatWindow(window, direction)\r\n\r\n        if (window.hasFocus || forceMarkMessagesAsSeen)\r\n        {\r\n            const unseenMessages = messages.filter(m => !m.dateSeen);\r\n\r\n            this.markMessagesAsRead(unseenMessages);\r\n            this.onMessagesSeen.emit(unseenMessages);\r\n        }\r\n    }\r\n\r\n    // Updates the friends list via the event handler\r\n    private onFriendsListChanged(participantsResponse: ParticipantResponse[]): void\r\n    {\r\n        if (participantsResponse) \r\n        {\r\n            this.participantsResponse = participantsResponse;\r\n\r\n            this.participants = participantsResponse.map((response: ParticipantResponse) => {\r\n                return response.participant;\r\n            });\r\n\r\n            this.participantsInteractedWith = [];\r\n        }\r\n    }\r\n\r\n    // Handles received messages by the adapter\r\n    private onMessageReceived(participant: IChatParticipant, message: Message)\r\n    {\r\n        if (participant && message)\r\n        {\r\n            let chatWindow = this.openChatWindow(participant);\r\n\r\n            this.assertMessageType(message);\r\n\r\n            if (!chatWindow[1] || !this.historyEnabled){\r\n                chatWindow[0].messages.push(message);\r\n\r\n                this.scrollChatWindow(chatWindow[0], ScrollDirection.Bottom);\r\n\r\n                if (chatWindow[0].hasFocus)\r\n                {\r\n                    this.markMessagesAsRead([message]);\r\n                    this.onMessagesSeen.emit([message]);\r\n                }\r\n            }\r\n\r\n            this.emitMessageSound(chatWindow[0]);\r\n            \r\n            // Github issue #58 \r\n            // Do not push browser notifications with message content for privacy purposes if the 'maximizeWindowOnNewMessage' setting is off and this is a new chat window.\r\n            if (this.maximizeWindowOnNewMessage || (!chatWindow[1] && !chatWindow[0].isCollapsed))\r\n            { \r\n                // Some messages are not pushed because they are loaded by fetching the history hence why we supply the message here\r\n                this.emitBrowserNotification(chatWindow[0], message);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Opens a new chat whindow. Takes care of available viewport\r\n    // Works for opening a chat window for an user or for a group\r\n    // Returns => [Window: Window object reference, boolean: Indicates if this window is a new chat window]\r\n    public openChatWindow(participant: IChatParticipant, focusOnNewWindow: boolean = false, invokedByUserClick: boolean = false): [Window, boolean]\r\n    {\r\n        // Is this window opened?\r\n        let openedWindow = this.windows.find(x => x.participant.id == participant.id);\r\n\r\n        if (!openedWindow)\r\n        {\r\n            if (invokedByUserClick) \r\n            {\r\n                this.onParticipantClicked.emit(participant);\r\n            }\r\n\r\n            // Refer to issue #58 on Github \r\n            let collapseWindow = invokedByUserClick ? false : !this.maximizeWindowOnNewMessage;\r\n\r\n            let newChatWindow: Window = new Window(participant, this.historyEnabled, collapseWindow);\r\n\r\n            // Loads the chat history via an RxJs Observable\r\n            if (this.historyEnabled)\r\n            {\r\n                this.fetchMessageHistory(newChatWindow);\r\n            }\r\n\r\n            this.windows.unshift(newChatWindow);\r\n\r\n            // Is there enough space left in the view port ? but should be displayed in mobile if option is enabled\r\n            if (!this.isViewportOnMobileEnabled) {\r\n                if (this.windows.length * this.windowSizeFactor >= this.viewPortTotalArea - (!this.hideFriendsList ? this.friendsListWidth : 0)) {\r\n                    this.windows.pop();\r\n                }\r\n            }\r\n\r\n            this.updateWindowsState(this.windows);\r\n            \r\n            if (focusOnNewWindow && !collapseWindow) \r\n            {\r\n                this.focusOnWindow(newChatWindow);\r\n            }\r\n\r\n            this.participantsInteractedWith.push(participant);\r\n            this.onParticipantChatOpened.emit(participant);\r\n\r\n            return [newChatWindow, true];\r\n        }\r\n        else\r\n        {\r\n            // Returns the existing chat window     \r\n            return [openedWindow, false];       \r\n        }\r\n    }\r\n\r\n    // Focus on the input element of the supplied window\r\n    private focusOnWindow(window: Window, callback: Function = () => {}) : void\r\n    {\r\n        let windowIndex = this.windows.indexOf(window);\r\n        if (windowIndex >= 0)\r\n        {\r\n            setTimeout(() => {\r\n                if (this.chatWindowInputs)\r\n                {\r\n                    let messageInputToFocus = this.chatWindowInputs.toArray()[windowIndex];\r\n                \r\n                    messageInputToFocus.nativeElement.focus(); \r\n                }\r\n\r\n                callback(); \r\n            });\r\n        } \r\n    }\r\n\r\n    // Scrolls a chat window message flow to the bottom\r\n    private scrollChatWindow(window: Window, direction: ScrollDirection): void\r\n    {\r\n        if (!window.isCollapsed){\r\n            let windowIndex = this.windows.indexOf(window);\r\n            setTimeout(() => {\r\n                if (this.chatMessageClusters){\r\n                    let targetWindow = this.chatMessageClusters.toArray()[windowIndex];\r\n\r\n                    if (targetWindow)\r\n                    {\r\n                        let element = this.chatMessageClusters.toArray()[windowIndex].nativeElement;\r\n                        let position = ( direction === ScrollDirection.Top ) ? 0 : element.scrollHeight;\r\n                        element.scrollTop = position;\r\n                    }\r\n                }\r\n            }); \r\n        }\r\n    }\r\n\r\n    // Marks all messages provided as read with the current time.\r\n    public markMessagesAsRead(messages: Message[]): void\r\n    {\r\n        let currentDate = new Date();\r\n\r\n        messages.forEach((msg)=>{\r\n            msg.dateSeen = currentDate;\r\n        });\r\n    }\r\n\r\n    // Buffers audio file (For component's bootstrapping)\r\n    private bufferAudioFile(): void {\r\n        if (this.audioSource && this.audioSource.length > 0)\r\n        {\r\n            this.audioFile = new Audio();\r\n            this.audioFile.src = this.audioSource;\r\n            this.audioFile.load();\r\n        }\r\n    }\r\n\r\n    // Emits a message notification audio if enabled after every message received\r\n    private emitMessageSound(window: Window): void\r\n    {\r\n        if (this.audioEnabled && !window.hasFocus && this.audioFile) {\r\n            this.audioFile.play();\r\n        }\r\n    }\r\n\r\n    // Emits a browser notification\r\n    private emitBrowserNotification(window: Window, message: Message): void\r\n    {       \r\n        if (this.browserNotificationsBootstrapped && !window.hasFocus && message) {\r\n            let notification = new Notification(`${this.localization.browserNotificationTitle} ${window.participant.displayName}`, {\r\n                'body': message.message,\r\n                'icon': this.browserNotificationIconSource\r\n            });\r\n\r\n            setTimeout(() => {\r\n                notification.close();\r\n            }, message.message.length <= 50 ? 5000 : 7000); // More time to read longer messages\r\n        }\r\n    }\r\n\r\n    // Saves current windows state into local storage if persistence is enabled\r\n    private updateWindowsState(windows: Window[]): void\r\n    {\r\n        if (this.persistWindowsState)\r\n        {\r\n            let participantIds = windows.map((w) => {\r\n                return w.participant.id;\r\n            });\r\n\r\n            localStorage.setItem(this.localStorageKey, JSON.stringify(participantIds));\r\n        }\r\n    }\r\n\r\n    private restoreWindowsState(): void\r\n    {\r\n        try\r\n        {\r\n            if (this.persistWindowsState)\r\n            {\r\n                let stringfiedParticipantIds = localStorage.getItem(this.localStorageKey);\r\n\r\n                if (stringfiedParticipantIds && stringfiedParticipantIds.length > 0)\r\n                {\r\n                    let participantIds = <number[]>JSON.parse(stringfiedParticipantIds);\r\n\r\n                    let participantsToRestore = this.participants.filter(u => participantIds.indexOf(u.id) >= 0);\r\n\r\n                    participantsToRestore.forEach((participant) => {\r\n                        this.openChatWindow(participant);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        catch (ex)\r\n        {\r\n            console.error(`An error occurred while restoring ng-chat windows state. Details: ${ex}`);\r\n        }\r\n    }\r\n\r\n    // Gets closest open window if any. Most recent opened has priority (Right)\r\n    private getClosestWindow(window: Window): Window | undefined\r\n    {   \r\n        let index = this.windows.indexOf(window);\r\n\r\n        if (index > 0)\r\n        {\r\n            return this.windows[index - 1];\r\n        }\r\n        else if (index == 0 && this.windows.length > 1)\r\n        {   \r\n            return this.windows[index + 1];\r\n        }\r\n    }\r\n\r\n    private assertMessageType(message: Message): void {\r\n        // Always fallback to \"Text\" messages to avoid rendenring issues\r\n        if (!message.type)\r\n        {\r\n            message.type = MessageType.Text;\r\n        }\r\n    }\r\n\r\n    private formatUnreadMessagesTotal(totalUnreadMessages: number): string\r\n    {\r\n        if (totalUnreadMessages > 0){\r\n\r\n            if (totalUnreadMessages > 99) \r\n                return  \"99+\";\r\n            else\r\n                return String(totalUnreadMessages); \r\n        }\r\n\r\n        // Empty fallback.\r\n        return \"\";\r\n    }\r\n\r\n    // Returns the total unread messages from a chat window. TODO: Could use some Angular pipes in the future \r\n    unreadMessagesTotal(window: Window): string\r\n    {\r\n        let totalUnreadMessages = 0;\r\n\r\n        if (window){\r\n            totalUnreadMessages = window.messages.filter(x => x.fromId != this.userId && !x.dateSeen).length;\r\n        }\r\n            \r\n        return this.formatUnreadMessagesTotal(totalUnreadMessages);\r\n    }\r\n\r\n    unreadMessagesTotalByParticipant(participant: IChatParticipant): string\r\n    {\r\n        let openedWindow = this.windows.find(x => x.participant.id == participant.id);\r\n\r\n        if (openedWindow){\r\n            return this.unreadMessagesTotal(openedWindow);\r\n        }\r\n        else\r\n        {\r\n            let totalUnreadMessages = this.participantsResponse\r\n                .filter(x => x.participant.id == participant.id && !this.participantsInteractedWith.find(u => u.id == participant.id) && x.metadata && x.metadata.totalUnreadMessages > 0)\r\n                .map((participantResponse) => {\r\n                    return participantResponse.metadata.totalUnreadMessages\r\n                })[0];\r\n\r\n            return this.formatUnreadMessagesTotal(totalUnreadMessages);\r\n        }\r\n    }\r\n\r\n    /*  Monitors pressed keys on a chat window\r\n        - Dispatches a message when the ENTER key is pressed\r\n        - Tabs between windows on TAB or SHIFT + TAB\r\n        - Closes the current focused window on ESC\r\n    */\r\n    onChatInputTyped(event: any, window: Window): void\r\n    {\r\n        switch (event.keyCode)\r\n        {\r\n            case 13:\r\n                if (window.newMessage && window.newMessage.trim() != \"\")\r\n                {\r\n                    let message = new Message();\r\n             \r\n                    message.fromId = this.userId;\r\n                    message.toId = window.participant.id;\r\n                    message.message = window.newMessage;\r\n                    message.dateSent = new Date();\r\n        \r\n                    window.messages.push(message);\r\n        \r\n                    this.adapter.sendMessage(message);\r\n        \r\n                    window.newMessage = \"\"; // Resets the new message input\r\n        \r\n                    this.scrollChatWindow(window, ScrollDirection.Bottom);\r\n                }\r\n                break;\r\n            case 9:\r\n                event.preventDefault();\r\n                \r\n                let currentWindowIndex = this.windows.indexOf(window);\r\n                let messageInputToFocus = this.chatWindowInputs.toArray()[currentWindowIndex + (event.shiftKey ? 1 : -1)]; // Goes back on shift + tab\r\n\r\n                if (!messageInputToFocus)\r\n                {\r\n                    // Edge windows, go to start or end\r\n                    messageInputToFocus = this.chatWindowInputs.toArray()[currentWindowIndex > 0 ? 0 : this.chatWindowInputs.length - 1]; \r\n                }\r\n\r\n                messageInputToFocus.nativeElement.focus();\r\n\r\n                break;\r\n            case 27:\r\n                let closestWindow = this.getClosestWindow(window);\r\n\r\n                if (closestWindow)\r\n                {\r\n                    this.focusOnWindow(closestWindow, () => { this.onCloseChatWindow(window); });\r\n                }\r\n                else\r\n                {\r\n                    this.onCloseChatWindow(window);\r\n                }\r\n        }\r\n    }\r\n\r\n    // Closes a chat window via the close 'X' button\r\n    onCloseChatWindow(window: Window): void \r\n    {\r\n        let index = this.windows.indexOf(window);\r\n\r\n        this.windows.splice(index, 1);\r\n\r\n        this.updateWindowsState(this.windows);\r\n\r\n        this.onParticipantChatClosed.emit(window.participant);\r\n    }\r\n\r\n    // Toggle friends list visibility\r\n    onChatTitleClicked(event: any): void\r\n    {\r\n        this.isCollapsed = !this.isCollapsed;\r\n    }\r\n\r\n    // Toggles a chat window visibility between maximized/minimized\r\n    onChatWindowClicked(window: Window): void\r\n    {\r\n        window.isCollapsed = !window.isCollapsed;\r\n        this.scrollChatWindow(window, ScrollDirection.Bottom);\r\n    }\r\n\r\n    // Asserts if a user avatar is visible in a chat cluster\r\n    isAvatarVisible(window: Window, message: Message, index: number): boolean\r\n    {\r\n        if (message.fromId != this.userId){\r\n            if (index == 0){\r\n                return true; // First message, good to show the thumbnail\r\n            }\r\n            else{\r\n                // Check if the previous message belongs to the same user, if it belongs there is no need to show the avatar again to form the message cluster\r\n                if (window.messages[index - 1].fromId != message.fromId){\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getChatWindowAvatar(participant: IChatParticipant, message: Message): string | null\r\n    {\r\n        if (participant.participantType == ChatParticipantType.User)\r\n        {\r\n            return participant.avatar;\r\n        }\r\n        else if (participant.participantType == ChatParticipantType.Group)\r\n        {\r\n            let group = participant as Group;\r\n            let userIndex = group.chattingTo.findIndex(x => x.id == message.fromId);\r\n\r\n            return group.chattingTo[userIndex >= 0 ? userIndex : 0].avatar;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // Toggles a window focus on the focus/blur of a 'newMessage' input\r\n    toggleWindowFocus(window: Window): void\r\n    {\r\n        window.hasFocus = !window.hasFocus;\r\n        if(window.hasFocus) {\r\n            const unreadMessages = window.messages\r\n                .filter(message => message.dateSeen == null \r\n                    && (message.toId == this.userId || window.participant.participantType === ChatParticipantType.Group));\r\n            \r\n            if (unreadMessages && unreadMessages.length > 0)\r\n            {\r\n                this.markMessagesAsRead(unreadMessages);\r\n                this.onMessagesSeen.emit(unreadMessages);\r\n            }\r\n        }\r\n    }\r\n\r\n    // [Localized] Returns the status descriptive title\r\n    getStatusTitle(status: ChatParticipantStatus) : any\r\n    {\r\n        let currentStatus = status.toString().toLowerCase();\r\n\r\n        return this.localization.statusDescription[currentStatus];\r\n    }\r\n\r\n    triggerOpenChatWindow(user: User): void {\r\n        if (user)\r\n        {\r\n            this.openChatWindow(user);\r\n        }\r\n    }\r\n\r\n    triggerCloseChatWindow(userId: any): void {\r\n        let openedWindow = this.windows.find(x => x.participant.id == userId);\r\n\r\n        if (openedWindow){\r\n            this.onCloseChatWindow(openedWindow);\r\n        }\r\n    }\r\n\r\n    triggerToggleChatWindowVisibility(userId: any): void {\r\n        let openedWindow = this.windows.find(x => x.participant.id == userId);\r\n\r\n        if (openedWindow){\r\n            this.onChatWindowClicked(openedWindow);\r\n        }\r\n    }\r\n\r\n    // Generates a unique file uploader id for each participant\r\n    getUniqueFileUploadInstanceId(window: Window): string\r\n    {\r\n        if (window && window.participant)\r\n        {\r\n            return `ng-chat-file-upload-${window.participant.id}`;\r\n        }\r\n        \r\n        return 'ng-chat-file-upload';\r\n    }\r\n\r\n    // Triggers native file upload for file selection from the user\r\n    triggerNativeFileUpload(window: Window): void\r\n    {\r\n        if (window)\r\n        {\r\n            const fileUploadInstanceId = this.getUniqueFileUploadInstanceId(window);\r\n            const uploadElementRef = this.nativeFileInputs.filter(x => x.nativeElement.id === fileUploadInstanceId)[0];\r\n\r\n            if (uploadElementRef)\r\n            uploadElementRef.nativeElement.click();\r\n        }\r\n    }\r\n\r\n    private clearInUseFileUploader(fileUploadInstanceId: string): void\r\n    {\r\n        const uploaderInstanceIdIndex = this.fileUploadersInUse.indexOf(fileUploadInstanceId);\r\n\r\n        if (uploaderInstanceIdIndex > -1) {\r\n            this.fileUploadersInUse.splice(uploaderInstanceIdIndex, 1);\r\n        }\r\n    }\r\n\r\n    isUploadingFile(window: Window): boolean\r\n    {\r\n        const fileUploadInstanceId = this.getUniqueFileUploadInstanceId(window);\r\n\r\n        return this.fileUploadersInUse.indexOf(fileUploadInstanceId) > -1;\r\n    }\r\n\r\n    // Handles file selection and uploads the selected file using the file upload adapter\r\n    onFileChosen(window: Window): void {\r\n        const fileUploadInstanceId = this.getUniqueFileUploadInstanceId(window);\r\n        const uploadElementRef = this.nativeFileInputs.filter(x => x.nativeElement.id === fileUploadInstanceId)[0];\r\n\r\n        if (uploadElementRef)\r\n        {\r\n            const file: File = uploadElementRef.nativeElement.files[0];\r\n\r\n            this.fileUploadersInUse.push(fileUploadInstanceId);\r\n\r\n            this.fileUploadAdapter.uploadFile(file, window.participant.id)\r\n                .subscribe(fileMessage => {\r\n                    this.clearInUseFileUploader(fileUploadInstanceId);\r\n\r\n                    fileMessage.fromId = this.userId;\r\n\r\n                    // Push file message to current user window   \r\n                    window.messages.push(fileMessage);\r\n        \r\n                    this.adapter.sendMessage(fileMessage);\r\n        \r\n                    this.scrollChatWindow(window, ScrollDirection.Bottom);\r\n\r\n                    // Resets the file upload element\r\n                    uploadElementRef.nativeElement.value = '';\r\n                }, (error) => {\r\n                    this.clearInUseFileUploader(fileUploadInstanceId);\r\n\r\n                    // Resets the file upload element\r\n                    uploadElementRef.nativeElement.value = '';\r\n\r\n                    // TODO: Invoke a file upload adapter error here\r\n                });\r\n        }\r\n    }\r\n    \r\n    onFriendsListCheckboxChange(selectedUser: User, isChecked: boolean): void\r\n    {\r\n        if(isChecked) {\r\n            this.selectedUsersFromFriendsList.push(selectedUser);\r\n        } \r\n        else \r\n        {\r\n            this.selectedUsersFromFriendsList.splice(this.selectedUsersFromFriendsList.indexOf(selectedUser), 1);\r\n        }\r\n    }\r\n\r\n    onFriendsListActionCancelClicked(): void\r\n    {\r\n        if (this.currentActiveOption)\r\n        {\r\n            this.currentActiveOption.isActive = false;\r\n            this.currentActiveOption = null;\r\n            this.selectedUsersFromFriendsList = [];\r\n        }\r\n    }\r\n\r\n    onFriendsListActionConfirmClicked() : void\r\n    {\r\n        let newGroup = new Group(this.selectedUsersFromFriendsList);\r\n\r\n        this.openChatWindow(newGroup);\r\n\r\n        if (this.groupAdapter)\r\n        {\r\n            this.groupAdapter.groupCreated(newGroup);\r\n        }\r\n\r\n        // Canceling current state\r\n        this.onFriendsListActionCancelClicked();\r\n    }\r\n\r\n    isUserSelectedFromFriendsList(user: User) : boolean\r\n    {\r\n        return (this.selectedUsersFromFriendsList.filter(item => item.id == user.id)).length > 0\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nlet emojiDictionary = [\r\n    { patterns: [':)', ':-)', '=)'], unicode: 'ð' },\r\n    { patterns: [':D', ':-D', '=D'], unicode: 'ð' },\r\n    { patterns: [':(', ':-(', '=('], unicode: 'ð' },\r\n    { patterns: [':|', ':-|', '=|'], unicode: 'ð' },\r\n    { patterns: [':*', ':-*', '=*'], unicode: 'ð' },\r\n    { patterns: ['T_T', 'T.T'], unicode: 'ð­' },\r\n    { patterns: [':O', ':-O', '=O', ':o', ':-o', '=o'], unicode: 'ð®' },\r\n    { patterns: [':P', ':-P', '=P', ':p', ':-p', '=p'], unicode: 'ð' },\r\n    { patterns: ['>.<'], unicode: 'ð£' },\r\n    { patterns: ['@.@'], unicode: 'ðµ' },\r\n    { patterns: ['*.*'], unicode: 'ð' },\r\n    { patterns: ['<3'], unicode: 'â¤ï¸' },\r\n    { patterns: ['^.^'], unicode: 'ð' },\r\n    { patterns: [':+1'], unicode: 'ð' },\r\n    { patterns: [':-1'], unicode: 'ð' }\r\n];\r\n\r\n/*\r\n * Transforms common emoji text to UTF encoded emojis\r\n*/\r\n@Pipe({name: 'emojify'})\r\nexport class EmojifyPipe implements PipeTransform {\r\n    transform(message: string, pipeEnabled: boolean): string {\r\n        if (pipeEnabled && message && message.length > 1) {  \r\n            emojiDictionary.forEach(emoji => {\r\n                emoji.patterns.forEach(pattern => {\r\n                    message = message.replace(pattern, emoji.unicode);\r\n                })\r\n            });\r\n        }\r\n\r\n    return message;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Transforms text containing URLs or E-mails to valid links/mailtos\r\n*/\r\n@Pipe({name: 'linkfy'})\r\nexport class LinkfyPipe implements PipeTransform {\r\n    transform(message: string, pipeEnabled: boolean): string {\r\n        if (pipeEnabled && message && message.length > 1)\r\n        {\r\n            let replacedText;\r\n            let replacePatternProtocol;\r\n            let replacePatternWWW;\r\n            let replacePatternMailTo;\r\n\r\n            // URLs starting with http://, https://, or ftp://\r\n            replacePatternProtocol = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\r\n            replacedText = message.replace(replacePatternProtocol, '<a href=\"$1\" target=\"_blank\">$1</a>');\r\n\r\n            // URLs starting with \"www.\" (ignoring // before it).\r\n            replacePatternWWW = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\r\n            replacedText = replacedText.replace(replacePatternWWW, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\r\n\r\n            // Change email addresses to mailto:: links.\r\n            replacePatternMailTo = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\r\n            replacedText = replacedText.replace(replacePatternMailTo, '<a href=\"mailto:$1\">$1</a>');\r\n\r\n            return replacedText;\r\n        }\r\n        else\r\n            return message;\r\n    } \r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeResourceUrl  } from '@angular/platform-browser';\r\n\r\n/*\r\n * Sanitizes an URL resource\r\n*/\r\n@Pipe({name: 'sanitize'})\r\nexport class SanitizePipe implements PipeTransform {\r\n    constructor(protected sanitizer: DomSanitizer) {}\r\n\r\n    transform(url: string): SafeResourceUrl {\r\n        return this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Group } from \"../core/group\";\r\nimport { ChatParticipantType } from \"../core/chat-participant-type.enum\";\r\nimport { IChatParticipant } from \"../core/chat-participant\";\r\nimport { Message } from \"../core/message\";\r\n\r\n/*\r\n * Renders the display name of a participant in a group based on who's sent the message\r\n*/\r\n@Pipe({name: 'groupMessageDisplayName'})\r\nexport class GroupMessageDisplayNamePipe implements PipeTransform {\r\n    transform(participant: IChatParticipant, message: Message): string {\r\n        if (participant && participant.participantType == ChatParticipantType.Group)\r\n        {\r\n            let group = participant as Group;\r\n            let userIndex = group.chattingTo.findIndex(x => x.id == message.fromId);\r\n\r\n            return group.chattingTo[userIndex >= 0 ? userIndex : 0].displayName;\r\n        }\r\n        else\r\n            return \"\";\r\n    } \r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Window } from '../../core/window';\r\nimport { IChatOption } from '../../core/chat-option';\r\n\r\n@Component({\r\n    selector: 'ng-chat-options',\r\n    templateUrl: './ng-chat-options.component.html',\r\n    styleUrls: ['./ng-chat-options.component.css']\r\n})\r\nexport class NgChatOptionsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  @Input()\r\n  public options: IChatOption[];\r\n\r\n  @Input()\r\n  public activeOptionTracker: IChatOption;\r\n\r\n  @Output()\r\n  public activeOptionTrackerChange: EventEmitter<IChatOption> = new EventEmitter<IChatOption>();\r\n\r\n  @Input()\r\n  public chattingTo: Window;\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onOptionClicked(option: IChatOption): void\r\n  {\r\n      if (option.action)\r\n      {\r\n          option.isActive = true;\r\n          option.action(this.chattingTo);\r\n          this.activeOptionTrackerChange.emit(option);\r\n      }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { NgChat } from './ng-chat.component';\r\nimport { EmojifyPipe } from './pipes/emojify.pipe';\r\nimport { LinkfyPipe } from './pipes/linkfy.pipe';\r\nimport { SanitizePipe } from './pipes/sanitize.pipe';\r\nimport { GroupMessageDisplayNamePipe } from './pipes/group-message-display-name.pipe';\r\nimport { NgChatOptionsComponent } from './components/ng-chat-options/ng-chat-options.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, HttpClientModule],\r\n  declarations: [NgChat, EmojifyPipe, LinkfyPipe, SanitizePipe, GroupMessageDisplayNamePipe, NgChatOptionsComponent],\r\n  exports: [NgChat]\r\n})\r\nexport class NgChatModule {\r\n}\r\n"]}