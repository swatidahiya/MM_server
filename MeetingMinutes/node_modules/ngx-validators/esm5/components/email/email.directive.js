import * as tslib_1 from "tslib";
import { Directive, Input, forwardRef } from "@angular/core";
import { NG_VALIDATORS } from "@angular/forms";
import { EmailValidators } from "./email-validators";
var EmailValidatorDirective = /** @class */ (function () {
    function EmailValidatorDirective() {
        this.email = "normal";
    }
    EmailValidatorDirective_1 = EmailValidatorDirective;
    EmailValidatorDirective.prototype.ngOnInit = function () {
        this.setValidator(this.email);
    };
    EmailValidatorDirective.prototype.setValidator = function (type) {
        switch (type) {
            case "simple":
                this.validator = EmailValidators.simple;
                break;
            case "normal":
                this.validator = EmailValidators.normal;
                break;
            default:
                this.validator = EmailValidators.normal;
                break;
        }
    };
    EmailValidatorDirective.prototype.ngOnChanges = function (changes) {
        if (changes.email && !changes.email.isFirstChange()) {
            this.setValidator(changes.email.currentValue);
            this.onChange();
        }
    };
    EmailValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
        this.onChange = fn;
    };
    EmailValidatorDirective.prototype.validate = function (c) {
        return this.validator(c);
    };
    var EmailValidatorDirective_1;
    tslib_1.__decorate([
        Input()
    ], EmailValidatorDirective.prototype, "email", void 0);
    EmailValidatorDirective = EmailValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "[email][formControlName],[email][formControl],[email][ngModel]",
            providers: [
                {
                    provide: NG_VALIDATORS,
                    // tslint:disable-next-line:no-forward-ref
                    useExisting: forwardRef(function () { return EmailValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], EmailValidatorDirective);
    return EmailValidatorDirective;
}());
export { EmailValidatorDirective };
var EmailSuggestValidatorDirective = /** @class */ (function () {
    function EmailSuggestValidatorDirective() {
    }
    EmailSuggestValidatorDirective_1 = EmailSuggestValidatorDirective;
    EmailSuggestValidatorDirective.prototype.ngOnInit = function () {
        this.validator = EmailValidators.suggest(this.emailSuggest);
    };
    EmailSuggestValidatorDirective.prototype.ngOnChanges = function (changes) {
        if (changes.emailSuggest && !changes.emailSuggest.isFirstChange()) {
            this.validator = EmailValidators.suggest(changes.emailSuggest.currentValue);
            this.onChange();
        }
    };
    EmailSuggestValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
        this.onChange = fn;
    };
    EmailSuggestValidatorDirective.prototype.validate = function (c) {
        return this.validator(c);
    };
    var EmailSuggestValidatorDirective_1;
    tslib_1.__decorate([
        Input()
    ], EmailSuggestValidatorDirective.prototype, "emailSuggest", void 0);
    EmailSuggestValidatorDirective = EmailSuggestValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "[emailSuggest][formControlName],[emailSuggest][formControl],[emailSuggest][ngModel]",
            providers: [
                {
                    provide: NG_VALIDATORS,
                    // tslint:disable-next-line:no-forward-ref
                    useExisting: forwardRef(function () { return EmailSuggestValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], EmailSuggestValidatorDirective);
    return EmailSuggestValidatorDirective;
}());
export { EmailSuggestValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJjb21wb25lbnRzL2VtYWlsL2VtYWlsLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFvQyxNQUFNLGVBQWUsQ0FBQztBQUMvRixPQUFPLEVBQUUsYUFBYSxFQUE2RCxNQUFNLGdCQUFnQixDQUFDO0FBRTFHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQWFyRDtJQVhBO1FBWVcsVUFBSyxHQUF3QixRQUFRLENBQUM7SUFxQ2pELENBQUM7Z0NBdENZLHVCQUF1QjtJQU1sQywwQ0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELDhDQUFZLEdBQVosVUFBYSxJQUFZO1FBQ3ZCLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxRQUFRO2dCQUNYLElBQUksQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQztnQkFDeEMsTUFBTTtZQUNSLEtBQUssUUFBUTtnQkFDWCxJQUFJLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUM7Z0JBQ3hDLE1BQU07WUFDUjtnQkFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUM7Z0JBQ3hDLE1BQU07U0FDVDtJQUNILENBQUM7SUFFRCw2Q0FBVyxHQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUNuRCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQztJQUVELDJEQUF5QixHQUF6QixVQUEyQixFQUFjO1FBQ3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCwwQ0FBUSxHQUFSLFVBQVMsQ0FBa0I7UUFDekIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLENBQUM7O0lBcENRO1FBQVIsS0FBSyxFQUFFOzBEQUF1QztJQURwQyx1QkFBdUI7UUFYbkMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGdFQUFnRTtZQUMxRSxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLGFBQWE7b0JBQ3RCLDBDQUEwQztvQkFDMUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEseUJBQXVCLEVBQXZCLENBQXVCLENBQUM7b0JBQ3RELEtBQUssRUFBRSxJQUFJO2lCQUNaO2FBQ0Y7U0FDRixDQUFDO09BQ1csdUJBQXVCLENBc0NuQztJQUFELDhCQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0F0Q1ksdUJBQXVCO0FBbURwQztJQUFBO0lBd0JBLENBQUM7dUNBeEJZLDhCQUE4QjtJQU16QyxpREFBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsb0RBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDakUsSUFBSSxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDNUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQztJQUVELGtFQUF5QixHQUF6QixVQUEyQixFQUFjO1FBQ3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxpREFBUSxHQUFSLFVBQVMsQ0FBa0I7UUFDekIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLENBQUM7O0lBdEJRO1FBQVIsS0FBSyxFQUFFO3dFQUE0QjtJQUR6Qiw4QkFBOEI7UUFYMUMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLHFGQUFxRjtZQUMvRixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLGFBQWE7b0JBQ3RCLDBDQUEwQztvQkFDMUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsZ0NBQThCLEVBQTlCLENBQThCLENBQUM7b0JBQzdELEtBQUssRUFBRSxJQUFJO2lCQUNaO2FBQ0Y7U0FDRixDQUFDO09BQ1csOEJBQThCLENBd0IxQztJQUFELHFDQUFDO0NBQUEsQUF4QkQsSUF3QkM7U0F4QlksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1haWxPcHRpb25zIH0gZnJvbSBcIi4vZW1haWwtdXRpbFwiO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgZm9yd2FyZFJlZiwgT25Jbml0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTkdfVkFMSURBVE9SUywgVmFsaWRhdG9yLCBWYWxpZGF0b3JGbiwgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5cbmltcG9ydCB7IEVtYWlsVmFsaWRhdG9ycyB9IGZyb20gXCIuL2VtYWlsLXZhbGlkYXRvcnNcIjtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiBcIltlbWFpbF1bZm9ybUNvbnRyb2xOYW1lXSxbZW1haWxdW2Zvcm1Db250cm9sXSxbZW1haWxdW25nTW9kZWxdXCIsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZm9yd2FyZC1yZWZcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEVtYWlsVmFsaWRhdG9yRGlyZWN0aXZlKSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIEVtYWlsVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yLCBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIGVtYWlsOiBcIm5vcm1hbFwiIHwgXCJzaW1wbGVcIiA9IFwibm9ybWFsXCI7XG5cbiAgcHJpdmF0ZSB2YWxpZGF0b3I6IFZhbGlkYXRvckZuO1xuICBwcml2YXRlIG9uQ2hhbmdlOiAoKSA9PiB2b2lkO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc2V0VmFsaWRhdG9yKHRoaXMuZW1haWwpO1xuICB9XG5cbiAgc2V0VmFsaWRhdG9yKHR5cGU6IHN0cmluZykge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcInNpbXBsZVwiOlxuICAgICAgICB0aGlzLnZhbGlkYXRvciA9IEVtYWlsVmFsaWRhdG9ycy5zaW1wbGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm5vcm1hbFwiOlxuICAgICAgICB0aGlzLnZhbGlkYXRvciA9IEVtYWlsVmFsaWRhdG9ycy5ub3JtYWw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBFbWFpbFZhbGlkYXRvcnMubm9ybWFsO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuZW1haWwgJiYgIWNoYW5nZXMuZW1haWwuaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICB0aGlzLnNldFZhbGlkYXRvcihjaGFuZ2VzLmVtYWlsLmN1cnJlbnRWYWx1ZSk7XG4gICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZT8oZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cblxuICB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0b3IoYyk7XG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiBcIltlbWFpbFN1Z2dlc3RdW2Zvcm1Db250cm9sTmFtZV0sW2VtYWlsU3VnZ2VzdF1bZm9ybUNvbnRyb2xdLFtlbWFpbFN1Z2dlc3RdW25nTW9kZWxdXCIsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZm9yd2FyZC1yZWZcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEVtYWlsU3VnZ2VzdFZhbGlkYXRvckRpcmVjdGl2ZSksXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBFbWFpbFN1Z2dlc3RWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3IsIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgZW1haWxTdWdnZXN0OiBFbWFpbE9wdGlvbnM7XG5cbiAgcHJpdmF0ZSB2YWxpZGF0b3I6IFZhbGlkYXRvckZuO1xuICBwcml2YXRlIG9uQ2hhbmdlOiAoKSA9PiB2b2lkO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudmFsaWRhdG9yID0gRW1haWxWYWxpZGF0b3JzLnN1Z2dlc3QodGhpcy5lbWFpbFN1Z2dlc3QpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLmVtYWlsU3VnZ2VzdCAmJiAhY2hhbmdlcy5lbWFpbFN1Z2dlc3QuaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICB0aGlzLnZhbGlkYXRvciA9IEVtYWlsVmFsaWRhdG9ycy5zdWdnZXN0KGNoYW5nZXMuZW1haWxTdWdnZXN0LmN1cnJlbnRWYWx1ZSk7XG4gICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZT8oZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cblxuICB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0b3IoYyk7XG4gIH1cbn1cbiJdfQ==