import { AbstractControlUtil } from "../abstract-control-util";
var UniversalValidators = /** @class */ (function () {
    function UniversalValidators() {
    }
    UniversalValidators.noWhitespace = function (control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        var pattern = "\\s";
        if (new RegExp(pattern).test(control.value)) {
            return { noWhitespaceRequired: true };
        }
        return undefined;
    };
    UniversalValidators.noEmptyString = function (control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (control.value.trim().length === 0) {
            return { noEmptyString: true };
        }
        return undefined;
    };
    UniversalValidators.isNumber = function (control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (isNaN(control.value)) {
            return { numberRequired: true };
        }
        return undefined;
    };
    UniversalValidators.isInRange = function (minValue, maxValue) {
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            if (isNaN(control.value)) {
                return { numberRequired: true };
            }
            if (+control.value < minValue) {
                return {
                    rangeValueToSmall: {
                        requiredMinValue: minValue,
                        requiredMaxValue: maxValue,
                        actual: control.value,
                    },
                };
            }
            if (+control.value > maxValue) {
                return {
                    rangeValueToBig: {
                        requiredMinValue: minValue,
                        requiredMaxValue: maxValue,
                        actual: control.value,
                    },
                };
            }
            else {
                return undefined;
            }
        };
        return validator;
    };
    UniversalValidators.minLength = function (minLength) {
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            var value = control.value;
            if (value.length >= minLength) {
                return undefined;
            }
            return {
                minLength: { requiredMinLength: minLength, actualLength: value.length },
            };
        };
        return validator;
    };
    UniversalValidators.maxLength = function (maxLength) {
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            var value = control.value;
            if (maxLength >= value.length) {
                return undefined;
            }
            return {
                maxLength: { requiredMaxLength: maxLength, actualLength: value.length },
            };
        };
        return validator;
    };
    UniversalValidators.min = function (min) {
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            var value = control.value;
            if (isNaN(control.value)) {
                return { numberRequired: true };
            }
            if (+value >= min) {
                return undefined;
            }
            return { min: { required: min, actual: control.value } };
        };
        return validator;
    };
    UniversalValidators.max = function (max) {
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            var value = control.value;
            if (isNaN(control.value)) {
                return { numberRequired: true };
            }
            if (max >= +value) {
                return undefined;
            }
            return { max: { required: max, actual: control.value } };
        };
        return validator;
    };
    return UniversalValidators;
}());
export { UniversalValidators };
//# sourceMappingURL=data:application/json;base64,