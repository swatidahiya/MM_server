import * as tslib_1 from "tslib";
import { Directive, Input, forwardRef } from "@angular/core";
import { NG_VALIDATORS, Validators } from "@angular/forms";
import { PasswordValidators } from "./password-validators";
var PasswordValidatorDirective = /** @class */ (function () {
    function PasswordValidatorDirective() {
        this.repeatCharacter = 4;
        this.alphabeticalCharacter = 1;
        this.digitCharacter = 1;
        this.lowercaseCharacter = 1;
        this.uppercaseCharacter = 1;
    }
    PasswordValidatorDirective_1 = PasswordValidatorDirective;
    PasswordValidatorDirective.prototype.ngOnInit = function () {
        this.repeatCharacterValidator = PasswordValidators.repeatCharacterRegexRule(this.repeatCharacter);
        this.alphabeticalCharacterValidator = PasswordValidators.alphabeticalCharacterRule(this.alphabeticalCharacter);
        this.digitCharacterValidator = PasswordValidators.digitCharacterRule(this.digitCharacter);
        this.lowercaseCharacterValidator = PasswordValidators.lowercaseCharacterRule(this.lowercaseCharacter);
        this.uppercaseCharacterValidator = PasswordValidators.uppercaseCharacterRule(this.uppercaseCharacter);
    };
    PasswordValidatorDirective.prototype.ngOnChanges = function (changes) {
        var inputChanged = false;
        if (changes.repeatCharacter) {
            this.repeatCharacterValidator = PasswordValidators.repeatCharacterRegexRule(changes.repeatCharacter.currentValue);
            inputChanged = changes.repeatCharacter.isFirstChange() ? false : true;
        }
        if (changes.alphabeticalCharacter) {
            this.alphabeticalCharacterValidator = PasswordValidators.alphabeticalCharacterRule(changes.alphabeticalCharacter.currentValue);
            inputChanged = changes.alphabeticalCharacter.isFirstChange() ? false : true;
        }
        if (changes.digitCharacter) {
            this.digitCharacterValidator = PasswordValidators.digitCharacterRule(changes.digitCharacter.currentValue);
            inputChanged = changes.digitCharacter.isFirstChange() ? false : true;
        }
        if (changes.lowercaseCharacter) {
            this.lowercaseCharacterValidator = PasswordValidators.lowercaseCharacterRule(changes.lowercaseCharacter.currentValue);
            inputChanged = changes.lowercaseCharacter.isFirstChange() ? false : true;
        }
        if (changes.uppercaseCharacter) {
            this.uppercaseCharacterValidator = PasswordValidators.uppercaseCharacterRule(changes.uppercaseCharacter.currentValue);
            inputChanged = changes.uppercaseCharacter.isFirstChange() ? false : true;
        }
        if (inputChanged) {
            this.onChange();
        }
    };
    PasswordValidatorDirective.prototype.validate = function (c) {
        var compose = Validators.compose([
            this.repeatCharacterValidator,
            this.digitCharacterValidator,
            this.alphabeticalCharacterValidator,
            this.lowercaseCharacterValidator,
            this.uppercaseCharacterValidator,
        ]);
        return compose(c);
    };
    PasswordValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
        this.onChange = fn;
    };
    var PasswordValidatorDirective_1;
    tslib_1.__decorate([
        Input()
    ], PasswordValidatorDirective.prototype, "repeatCharacter", void 0);
    tslib_1.__decorate([
        Input()
    ], PasswordValidatorDirective.prototype, "alphabeticalCharacter", void 0);
    tslib_1.__decorate([
        Input()
    ], PasswordValidatorDirective.prototype, "digitCharacter", void 0);
    tslib_1.__decorate([
        Input()
    ], PasswordValidatorDirective.prototype, "lowercaseCharacter", void 0);
    tslib_1.__decorate([
        Input()
    ], PasswordValidatorDirective.prototype, "uppercaseCharacter", void 0);
    PasswordValidatorDirective = PasswordValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: "[password][formControlName],[password][formControl],[password][ngModel]",
            providers: [
                {
                    provide: NG_VALIDATORS,
                    // tslint:disable-next-line:no-forward-ref
                    useExisting: forwardRef(function () { return PasswordValidatorDirective_1; }),
                    multi: true,
                },
            ],
        })
    ], PasswordValidatorDirective);
    return PasswordValidatorDirective;
}());
export { PasswordValidatorDirective };
//# sourceMappingURL=data:application/json;base64,