import * as tslib_1 from "tslib";
import { AbstractControlUtil } from "./../abstract-control-util";
// tslint:disable-next-line:variable-name
var PasswordValidators = /** @class */ (function () {
    function PasswordValidators() {
    }
    PasswordValidators.repeatCharacterRegexRule = function (repeatCount) {
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            var repeatDec = repeatCount - 1;
            var pattern = "([^\\x00-\\x1F])\\1{" + repeatDec + "}";
            if (control.value !== "" && new RegExp(pattern).test(control.value)) {
                return { repeatCharacterRegexRule: { repeatCount: repeatCount } };
            }
            return undefined;
        };
        return validator;
    };
    PasswordValidators.allowedCharacterRule = function (allowedChars) {
        var validator = function (control) {
            var e_1, _a;
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            var value = control.value;
            var valid = true;
            var invalidChars = [];
            try {
                for (var value_1 = tslib_1.__values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                    var char = value_1_1.value;
                    if (allowedChars.indexOf(char) === -1) {
                        valid = false;
                        if (invalidChars.indexOf(char) === -1) {
                            invalidChars.push(char);
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!valid) {
                return {
                    allowedCharacterRule: {
                        invalidChars: invalidChars,
                        allowedChars: allowedChars,
                    },
                };
            }
            return undefined;
        };
        return validator;
    };
    PasswordValidators.alphabeticalCharacterRule = function (amount) {
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            var value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            var pattern = /[^A-Za-z]+/g;
            var stripped = value.replace(pattern, "");
            if (stripped.length < amount) {
                return {
                    alphabeticalCharacterRule: {
                        required: amount,
                        actual: stripped.length,
                    },
                };
            }
            return undefined;
        };
        return validator;
    };
    PasswordValidators.digitCharacterRule = function (amount) {
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            var value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            var pattern = /[^0-9\.]+/g;
            var stripped = value.replace(pattern, "");
            if (stripped.length < amount) {
                return {
                    digitCharacterRule: { required: amount, actual: stripped.length },
                };
            }
            return undefined;
        };
        return validator;
    };
    PasswordValidators.lowercaseCharacterRule = function (amount) {
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            var value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            var pattern = /[^a-z]+/g;
            var stripped = value.replace(pattern, "");
            if (stripped.length < amount) {
                return {
                    lowercaseCharacterRule: { required: amount, actual: stripped.length },
                };
            }
            return undefined;
        };
        return validator;
    };
    PasswordValidators.uppercaseCharacterRule = function (amount) {
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            var value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            var pattern = /[^A-Z]+/g;
            var stripped = value.replace(pattern, "");
            if (stripped.length < amount) {
                return {
                    uppercaseCharacterRule: { required: amount, actual: stripped.length },
                };
            }
            return undefined;
        };
        return validator;
    };
    PasswordValidators.specialCharacterRule = function (amount) {
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            var value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            var pattern = /[\w\s]+/g;
            var stripped = value.replace(pattern, "");
            if (stripped.length < amount) {
                return {
                    specialCharacterRule: { required: amount, actual: stripped.length },
                };
            }
            return undefined;
        };
        return validator;
    };
    PasswordValidators.mismatchedPasswords = function (passwordControlName, confirmPasswordControlName) {
        var validator = function (group) {
            var newPasswordValue = group.get(passwordControlName ? passwordControlName : "newPassword").value;
            var newPasswordConfirmValue = group.get(confirmPasswordControlName ? confirmPasswordControlName : "confirmPassword").value;
            if (newPasswordValue !== newPasswordConfirmValue) {
                AbstractControlUtil.addError(group.get(confirmPasswordControlName ? confirmPasswordControlName : "confirmPassword"), "mismatchedPasswords", true);
                return { mismatchedPasswords: true };
            }
            else {
                AbstractControlUtil.removeError(group.get(confirmPasswordControlName ? confirmPasswordControlName : "confirmPassword"), "mismatchedPasswords");
            }
            return undefined;
        };
        return validator;
    };
    return PasswordValidators;
}());
export { PasswordValidators };
//# sourceMappingURL=data:application/json;base64,