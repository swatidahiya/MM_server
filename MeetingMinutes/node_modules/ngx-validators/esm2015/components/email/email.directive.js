var EmailValidatorDirective_1, EmailSuggestValidatorDirective_1;
import * as tslib_1 from "tslib";
import { Directive, Input, forwardRef } from "@angular/core";
import { NG_VALIDATORS } from "@angular/forms";
import { EmailValidators } from "./email-validators";
let EmailValidatorDirective = EmailValidatorDirective_1 = class EmailValidatorDirective {
    constructor() {
        this.email = "normal";
    }
    ngOnInit() {
        this.setValidator(this.email);
    }
    setValidator(type) {
        switch (type) {
            case "simple":
                this.validator = EmailValidators.simple;
                break;
            case "normal":
                this.validator = EmailValidators.normal;
                break;
            default:
                this.validator = EmailValidators.normal;
                break;
        }
    }
    ngOnChanges(changes) {
        if (changes.email && !changes.email.isFirstChange()) {
            this.setValidator(changes.email.currentValue);
            this.onChange();
        }
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
    validate(c) {
        return this.validator(c);
    }
};
tslib_1.__decorate([
    Input()
], EmailValidatorDirective.prototype, "email", void 0);
EmailValidatorDirective = EmailValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "[email][formControlName],[email][formControl],[email][ngModel]",
        providers: [
            {
                provide: NG_VALIDATORS,
                // tslint:disable-next-line:no-forward-ref
                useExisting: forwardRef(() => EmailValidatorDirective_1),
                multi: true,
            },
        ],
    })
], EmailValidatorDirective);
export { EmailValidatorDirective };
let EmailSuggestValidatorDirective = EmailSuggestValidatorDirective_1 = class EmailSuggestValidatorDirective {
    ngOnInit() {
        this.validator = EmailValidators.suggest(this.emailSuggest);
    }
    ngOnChanges(changes) {
        if (changes.emailSuggest && !changes.emailSuggest.isFirstChange()) {
            this.validator = EmailValidators.suggest(changes.emailSuggest.currentValue);
            this.onChange();
        }
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
    validate(c) {
        return this.validator(c);
    }
};
tslib_1.__decorate([
    Input()
], EmailSuggestValidatorDirective.prototype, "emailSuggest", void 0);
EmailSuggestValidatorDirective = EmailSuggestValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "[emailSuggest][formControlName],[emailSuggest][formControl],[emailSuggest][ngModel]",
        providers: [
            {
                provide: NG_VALIDATORS,
                // tslint:disable-next-line:no-forward-ref
                useExisting: forwardRef(() => EmailSuggestValidatorDirective_1),
                multi: true,
            },
        ],
    })
], EmailSuggestValidatorDirective);
export { EmailSuggestValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJjb21wb25lbnRzL2VtYWlsL2VtYWlsLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFDL0YsT0FBTyxFQUFFLGFBQWEsRUFBNkQsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFhckQsSUFBYSx1QkFBdUIsK0JBQXBDLE1BQWEsdUJBQXVCO0lBWHBDO1FBWVcsVUFBSyxHQUF3QixRQUFRLENBQUM7SUFxQ2pELENBQUM7SUFoQ0MsUUFBUTtRQUNOLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBWTtRQUN2QixRQUFRLElBQUksRUFBRTtZQUNaLEtBQUssUUFBUTtnQkFDWCxJQUFJLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUM7Z0JBQ3hDLE1BQU07WUFDUixLQUFLLFFBQVE7Z0JBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDO2dCQUN4QyxNQUFNO1lBQ1I7Z0JBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDO2dCQUN4QyxNQUFNO1NBQ1Q7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNqQjtJQUNILENBQUM7SUFFRCx5QkFBeUIsQ0FBRSxFQUFjO1FBQ3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxRQUFRLENBQUMsQ0FBa0I7UUFDekIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDRixDQUFBO0FBckNVO0lBQVIsS0FBSyxFQUFFO3NEQUF1QztBQURwQyx1QkFBdUI7SUFYbkMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGdFQUFnRTtRQUMxRSxTQUFTLEVBQUU7WUFDVDtnQkFDRSxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsMENBQTBDO2dCQUMxQyxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF1QixDQUFDO2dCQUN0RCxLQUFLLEVBQUUsSUFBSTthQUNaO1NBQ0Y7S0FDRixDQUFDO0dBQ1csdUJBQXVCLENBc0NuQztTQXRDWSx1QkFBdUI7QUFtRHBDLElBQWEsOEJBQThCLHNDQUEzQyxNQUFhLDhCQUE4QjtJQU16QyxRQUFRO1FBQ04sSUFBSSxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDakUsSUFBSSxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDNUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQztJQUVELHlCQUF5QixDQUFFLEVBQWM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFFBQVEsQ0FBQyxDQUFrQjtRQUN6QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNGLENBQUE7QUF2QlU7SUFBUixLQUFLLEVBQUU7b0VBQTRCO0FBRHpCLDhCQUE4QjtJQVgxQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUscUZBQXFGO1FBQy9GLFNBQVMsRUFBRTtZQUNUO2dCQUNFLE9BQU8sRUFBRSxhQUFhO2dCQUN0QiwwQ0FBMEM7Z0JBQzFDLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZ0NBQThCLENBQUM7Z0JBQzdELEtBQUssRUFBRSxJQUFJO2FBQ1o7U0FDRjtLQUNGLENBQUM7R0FDVyw4QkFBOEIsQ0F3QjFDO1NBeEJZLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVtYWlsT3B0aW9ucyB9IGZyb20gXCIuL2VtYWlsLXV0aWxcIjtcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIGZvcndhcmRSZWYsIE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE5HX1ZBTElEQVRPUlMsIFZhbGlkYXRvciwgVmFsaWRhdG9yRm4sIEFic3RyYWN0Q29udHJvbCwgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuXG5pbXBvcnQgeyBFbWFpbFZhbGlkYXRvcnMgfSBmcm9tIFwiLi9lbWFpbC12YWxpZGF0b3JzXCI7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogXCJbZW1haWxdW2Zvcm1Db250cm9sTmFtZV0sW2VtYWlsXVtmb3JtQ29udHJvbF0sW2VtYWlsXVtuZ01vZGVsXVwiLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZvcndhcmQtcmVmXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFbWFpbFZhbGlkYXRvckRpcmVjdGl2ZSksXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBFbWFpbFZhbGlkYXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciwgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBlbWFpbDogXCJub3JtYWxcIiB8IFwic2ltcGxlXCIgPSBcIm5vcm1hbFwiO1xuXG4gIHByaXZhdGUgdmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcbiAgcHJpdmF0ZSBvbkNoYW5nZTogKCkgPT4gdm9pZDtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldFZhbGlkYXRvcih0aGlzLmVtYWlsKTtcbiAgfVxuXG4gIHNldFZhbGlkYXRvcih0eXBlOiBzdHJpbmcpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJzaW1wbGVcIjpcbiAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBFbWFpbFZhbGlkYXRvcnMuc2ltcGxlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJub3JtYWxcIjpcbiAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBFbWFpbFZhbGlkYXRvcnMubm9ybWFsO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMudmFsaWRhdG9yID0gRW1haWxWYWxpZGF0b3JzLm5vcm1hbDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLmVtYWlsICYmICFjaGFuZ2VzLmVtYWlsLmlzRmlyc3RDaGFuZ2UoKSkge1xuICAgICAgdGhpcy5zZXRWYWxpZGF0b3IoY2hhbmdlcy5lbWFpbC5jdXJyZW50VmFsdWUpO1xuICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2U/KGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgdmFsaWRhdGUoYzogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yKGMpO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogXCJbZW1haWxTdWdnZXN0XVtmb3JtQ29udHJvbE5hbWVdLFtlbWFpbFN1Z2dlc3RdW2Zvcm1Db250cm9sXSxbZW1haWxTdWdnZXN0XVtuZ01vZGVsXVwiLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZvcndhcmQtcmVmXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFbWFpbFN1Z2dlc3RWYWxpZGF0b3JEaXJlY3RpdmUpLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgRW1haWxTdWdnZXN0VmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yLCBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIGVtYWlsU3VnZ2VzdDogRW1haWxPcHRpb25zO1xuXG4gIHByaXZhdGUgdmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcbiAgcHJpdmF0ZSBvbkNoYW5nZTogKCkgPT4gdm9pZDtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnZhbGlkYXRvciA9IEVtYWlsVmFsaWRhdG9ycy5zdWdnZXN0KHRoaXMuZW1haWxTdWdnZXN0KTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy5lbWFpbFN1Z2dlc3QgJiYgIWNoYW5nZXMuZW1haWxTdWdnZXN0LmlzRmlyc3RDaGFuZ2UoKSkge1xuICAgICAgdGhpcy52YWxpZGF0b3IgPSBFbWFpbFZhbGlkYXRvcnMuc3VnZ2VzdChjaGFuZ2VzLmVtYWlsU3VnZ2VzdC5jdXJyZW50VmFsdWUpO1xuICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2U/KGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgdmFsaWRhdGUoYzogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yKGMpO1xuICB9XG59XG4iXX0=