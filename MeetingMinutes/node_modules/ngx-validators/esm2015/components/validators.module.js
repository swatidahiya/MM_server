import * as tslib_1 from "tslib";
import { EmptyStringValidatorDirective, IsInRangeValidatorDirective, IsNumberValidatorDirective, MaxValidatorDirective, MinValidatorDirective, WhiteSpaceValidatorDirective, } from "./universal/universal.directive";
import { NgModule } from "@angular/core";
import { CreditCardValidatorDirective } from "./creditcard/creditcard.directive";
import { EmailValidatorDirective, EmailSuggestValidatorDirective } from "./email/email.directive";
import { PasswordValidatorDirective } from "./password/password.directive";
import { EqualToDirective } from "./equal-to/equal-to.directive";
let ValidatorsModule = class ValidatorsModule {
};
ValidatorsModule = tslib_1.__decorate([
    NgModule({
        declarations: [
            CreditCardValidatorDirective,
            EmailValidatorDirective,
            EmailSuggestValidatorDirective,
            PasswordValidatorDirective,
            IsInRangeValidatorDirective,
            IsNumberValidatorDirective,
            MaxValidatorDirective,
            MinValidatorDirective,
            WhiteSpaceValidatorDirective,
            EmptyStringValidatorDirective,
            EqualToDirective,
        ],
        exports: [
            CreditCardValidatorDirective,
            EmailValidatorDirective,
            EmailSuggestValidatorDirective,
            PasswordValidatorDirective,
            IsInRangeValidatorDirective,
            IsNumberValidatorDirective,
            MaxValidatorDirective,
            MinValidatorDirective,
            WhiteSpaceValidatorDirective,
            EmptyStringValidatorDirective,
            EqualToDirective,
        ],
    })
], ValidatorsModule);
export { ValidatorsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdmFsaWRhdG9ycy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCw2QkFBNkIsRUFDN0IsMkJBQTJCLEVBQzNCLDBCQUEwQixFQUMxQixxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLDRCQUE0QixHQUM3QixNQUFNLGlDQUFpQyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDakYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLDhCQUE4QixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbEcsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUE4QmpFLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0NBQUcsQ0FBQTtBQUFuQixnQkFBZ0I7SUE1QjVCLFFBQVEsQ0FBQztRQUNSLFlBQVksRUFBRTtZQUNaLDRCQUE0QjtZQUM1Qix1QkFBdUI7WUFDdkIsOEJBQThCO1lBQzlCLDBCQUEwQjtZQUMxQiwyQkFBMkI7WUFDM0IsMEJBQTBCO1lBQzFCLHFCQUFxQjtZQUNyQixxQkFBcUI7WUFDckIsNEJBQTRCO1lBQzVCLDZCQUE2QjtZQUM3QixnQkFBZ0I7U0FDakI7UUFDRCxPQUFPLEVBQUU7WUFDUCw0QkFBNEI7WUFDNUIsdUJBQXVCO1lBQ3ZCLDhCQUE4QjtZQUM5QiwwQkFBMEI7WUFDMUIsMkJBQTJCO1lBQzNCLDBCQUEwQjtZQUMxQixxQkFBcUI7WUFDckIscUJBQXFCO1lBQ3JCLDRCQUE0QjtZQUM1Qiw2QkFBNkI7WUFDN0IsZ0JBQWdCO1NBQ2pCO0tBQ0YsQ0FBQztHQUNXLGdCQUFnQixDQUFHO1NBQW5CLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEVtcHR5U3RyaW5nVmFsaWRhdG9yRGlyZWN0aXZlLFxuICBJc0luUmFuZ2VWYWxpZGF0b3JEaXJlY3RpdmUsXG4gIElzTnVtYmVyVmFsaWRhdG9yRGlyZWN0aXZlLFxuICBNYXhWYWxpZGF0b3JEaXJlY3RpdmUsXG4gIE1pblZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgV2hpdGVTcGFjZVZhbGlkYXRvckRpcmVjdGl2ZSxcbn0gZnJvbSBcIi4vdW5pdmVyc2FsL3VuaXZlcnNhbC5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgQ3JlZGl0Q2FyZFZhbGlkYXRvckRpcmVjdGl2ZSB9IGZyb20gXCIuL2NyZWRpdGNhcmQvY3JlZGl0Y2FyZC5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IEVtYWlsVmFsaWRhdG9yRGlyZWN0aXZlLCBFbWFpbFN1Z2dlc3RWYWxpZGF0b3JEaXJlY3RpdmUgfSBmcm9tIFwiLi9lbWFpbC9lbWFpbC5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IFBhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlIH0gZnJvbSBcIi4vcGFzc3dvcmQvcGFzc3dvcmQuZGlyZWN0aXZlXCI7XG5pbXBvcnQgeyBFcXVhbFRvRGlyZWN0aXZlIH0gZnJvbSBcIi4vZXF1YWwtdG8vZXF1YWwtdG8uZGlyZWN0aXZlXCI7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIENyZWRpdENhcmRWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRW1haWxWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRW1haWxTdWdnZXN0VmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIFBhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIElzSW5SYW5nZVZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBJc051bWJlclZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBNYXhWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgTWluVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIFdoaXRlU3BhY2VWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRW1wdHlTdHJpbmdWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRXF1YWxUb0RpcmVjdGl2ZSxcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIENyZWRpdENhcmRWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRW1haWxWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRW1haWxTdWdnZXN0VmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIFBhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIElzSW5SYW5nZVZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBJc051bWJlclZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBNYXhWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgTWluVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIFdoaXRlU3BhY2VWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRW1wdHlTdHJpbmdWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRXF1YWxUb0RpcmVjdGl2ZSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVmFsaWRhdG9yc01vZHVsZSB7fVxuIl19