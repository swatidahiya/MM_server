import { AbstractControlUtil } from "../abstract-control-util";
export class UniversalValidators {
    static noWhitespace(control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        const pattern = "\\s";
        if (new RegExp(pattern).test(control.value)) {
            return { noWhitespaceRequired: true };
        }
        return undefined;
    }
    static noEmptyString(control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (control.value.trim().length === 0) {
            return { noEmptyString: true };
        }
        return undefined;
    }
    static isNumber(control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (isNaN(control.value)) {
            return { numberRequired: true };
        }
        return undefined;
    }
    static isInRange(minValue, maxValue) {
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            if (isNaN(control.value)) {
                return { numberRequired: true };
            }
            if (+control.value < minValue) {
                return {
                    rangeValueToSmall: {
                        requiredMinValue: minValue,
                        requiredMaxValue: maxValue,
                        actual: control.value,
                    },
                };
            }
            if (+control.value > maxValue) {
                return {
                    rangeValueToBig: {
                        requiredMinValue: minValue,
                        requiredMaxValue: maxValue,
                        actual: control.value,
                    },
                };
            }
            else {
                return undefined;
            }
        };
        return validator;
    }
    static minLength(minLength) {
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            const value = control.value;
            if (value.length >= minLength) {
                return undefined;
            }
            return {
                minLength: { requiredMinLength: minLength, actualLength: value.length },
            };
        };
        return validator;
    }
    static maxLength(maxLength) {
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            const value = control.value;
            if (maxLength >= value.length) {
                return undefined;
            }
            return {
                maxLength: { requiredMaxLength: maxLength, actualLength: value.length },
            };
        };
        return validator;
    }
    static min(min) {
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            const value = control.value;
            if (isNaN(control.value)) {
                return { numberRequired: true };
            }
            if (+value >= min) {
                return undefined;
            }
            return { min: { required: min, actual: control.value } };
        };
        return validator;
    }
    static max(max) {
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            const value = control.value;
            if (isNaN(control.value)) {
                return { numberRequired: true };
            }
            if (max >= +value) {
                return undefined;
            }
            return { max: { required: max, actual: control.value } };
        };
        return validator;
    }
}
//# sourceMappingURL=data:application/json;base64,