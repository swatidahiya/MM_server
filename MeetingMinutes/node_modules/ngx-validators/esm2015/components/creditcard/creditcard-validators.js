import { AbstractControlUtil } from "./../abstract-control-util";
const visaRegex = "^(?:4[0-9]{12})(?:[0-9]{3})?$";
const americanExpressRegex = "^(?:3[47][0-9]{13})$";
const maestroRegex = "^(?:(?:5[0678]\\d\\d|6304|6390|67\\d\\d)\\d{8,15})$";
const jcbRegex = "^(?:(?:2131|1800|35\\d{3})\\d{11})$";
const discoverRegex = "^(?:6(?:011|5[0-9]{2})(?:[0-9]{12}))$";
const dinersclubRegex = "^(?:3(?:0[0-5]|[68][0-9])[0-9]{11})$";
const mastercardRegex = "^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$";
export class CreditCardValidators {
    static isCreditCard(control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (new RegExp(americanExpressRegex +
            "|" +
            visaRegex +
            "|" +
            maestroRegex +
            "|" +
            jcbRegex +
            "|" +
            discoverRegex +
            "|" +
            mastercardRegex +
            "|" +
            dinersclubRegex).test(control.value)) {
            return undefined;
        }
        return { creditcard: true };
    }
    static americanExpress(control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (new RegExp(americanExpressRegex).test(control.value)) {
            return undefined;
        }
        return { americanExpress: true };
    }
    static dinersclub(control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (new RegExp(dinersclubRegex).test(control.value)) {
            return undefined;
        }
        return { dinersclub: true };
    }
    static discover(control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (new RegExp(discoverRegex).test(control.value)) {
            return undefined;
        }
        return { discover: true };
    }
    static jcb(control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (new RegExp(jcbRegex).test(control.value)) {
            return undefined;
        }
        return { jcb: true };
    }
    static maestro(control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (new RegExp(maestroRegex).test(control.value)) {
            return undefined;
        }
        return { maestro: true };
    }
    static mastercard(control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (new RegExp(mastercardRegex).test(control.value)) {
            return undefined;
        }
        return { mastercard: true };
    }
    static visa(control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (new RegExp(visaRegex).test(control.value)) {
            return undefined;
        }
        return { visa: true };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGl0Y2FyZC12YWxpZGF0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJjb21wb25lbnRzL2NyZWRpdGNhcmQvY3JlZGl0Y2FyZC12YWxpZGF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRWpFLE1BQU0sU0FBUyxHQUFHLCtCQUErQixDQUFDO0FBQ2xELE1BQU0sb0JBQW9CLEdBQUcsc0JBQXNCLENBQUM7QUFDcEQsTUFBTSxZQUFZLEdBQUcscURBQXFELENBQUM7QUFDM0UsTUFBTSxRQUFRLEdBQUcscUNBQXFDLENBQUM7QUFDdkQsTUFBTSxhQUFhLEdBQUcsdUNBQXVDLENBQUM7QUFDOUQsTUFBTSxlQUFlLEdBQUcsc0NBQXNDLENBQUM7QUFDL0QsTUFBTSxlQUFlLEdBQUcscUZBQXFGLENBQUM7QUFFOUcsTUFBTSxPQUFPLG9CQUFvQjtJQUN4QixNQUFNLENBQUMsWUFBWSxDQUFDLE9BQXdCO1FBQ2pELElBQUksbUJBQW1CLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBQ2hFLElBQ0UsSUFBSSxNQUFNLENBQ1Isb0JBQW9CO1lBQ2xCLEdBQUc7WUFDSCxTQUFTO1lBQ1QsR0FBRztZQUNILFlBQVk7WUFDWixHQUFHO1lBQ0gsUUFBUTtZQUNSLEdBQUc7WUFDSCxhQUFhO1lBQ2IsR0FBRztZQUNILGVBQWU7WUFDZixHQUFHO1lBQ0gsZUFBZSxDQUNsQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3JCO1lBQ0EsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxPQUFPLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFTSxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQXdCO1FBQ3BELElBQUksbUJBQW1CLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBQ2hFLElBQUksSUFBSSxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3hELE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBQ0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUF3QjtRQUMvQyxJQUFJLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7WUFBRSxPQUFPLFNBQVMsQ0FBQztRQUNoRSxJQUFJLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbkQsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxPQUFPLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFTSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQXdCO1FBQzdDLElBQUksbUJBQW1CLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBQ2hFLElBQUksSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqRCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUNELE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUNNLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBd0I7UUFDeEMsSUFBSSxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO1lBQUUsT0FBTyxTQUFTLENBQUM7UUFDaEUsSUFBSSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzVDLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBQ0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBQ00sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUF3QjtRQUM1QyxJQUFJLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7WUFBRSxPQUFPLFNBQVMsQ0FBQztRQUNoRSxJQUFJLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDaEQsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTSxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQXdCO1FBQy9DLElBQUksbUJBQW1CLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBQ2hFLElBQUksSUFBSSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNuRCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUNELE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBd0I7UUFDekMsSUFBSSxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO1lBQUUsT0FBTyxTQUFTLENBQUM7UUFDaEUsSUFBSSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzdDLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBQ0QsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUN4QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbFV0aWwgfSBmcm9tIFwiLi8uLi9hYnN0cmFjdC1jb250cm9sLXV0aWxcIjtcblxuY29uc3QgdmlzYVJlZ2V4ID0gXCJeKD86NFswLTldezEyfSkoPzpbMC05XXszfSk/JFwiO1xuY29uc3QgYW1lcmljYW5FeHByZXNzUmVnZXggPSBcIl4oPzozWzQ3XVswLTldezEzfSkkXCI7XG5jb25zdCBtYWVzdHJvUmVnZXggPSBcIl4oPzooPzo1WzA2NzhdXFxcXGRcXFxcZHw2MzA0fDYzOTB8NjdcXFxcZFxcXFxkKVxcXFxkezgsMTV9KSRcIjtcbmNvbnN0IGpjYlJlZ2V4ID0gXCJeKD86KD86MjEzMXwxODAwfDM1XFxcXGR7M30pXFxcXGR7MTF9KSRcIjtcbmNvbnN0IGRpc2NvdmVyUmVnZXggPSBcIl4oPzo2KD86MDExfDVbMC05XXsyfSkoPzpbMC05XXsxMn0pKSRcIjtcbmNvbnN0IGRpbmVyc2NsdWJSZWdleCA9IFwiXig/OjMoPzowWzAtNV18WzY4XVswLTldKVswLTldezExfSkkXCI7XG5jb25zdCBtYXN0ZXJjYXJkUmVnZXggPSBcIl4oPzo1WzEtNV1bMC05XXsyfXwyMjJbMS05XXwyMlszLTldWzAtOV18MlszLTZdWzAtOV17Mn18MjdbMDFdWzAtOV18MjcyMClbMC05XXsxMn0kXCI7XG5cbmV4cG9ydCBjbGFzcyBDcmVkaXRDYXJkVmFsaWRhdG9ycyB7XG4gIHB1YmxpYyBzdGF0aWMgaXNDcmVkaXRDYXJkKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9IHtcbiAgICBpZiAoQWJzdHJhY3RDb250cm9sVXRpbC5pc05vdFByZXNlbnQoY29udHJvbCkpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKFxuICAgICAgbmV3IFJlZ0V4cChcbiAgICAgICAgYW1lcmljYW5FeHByZXNzUmVnZXggK1xuICAgICAgICAgIFwifFwiICtcbiAgICAgICAgICB2aXNhUmVnZXggK1xuICAgICAgICAgIFwifFwiICtcbiAgICAgICAgICBtYWVzdHJvUmVnZXggK1xuICAgICAgICAgIFwifFwiICtcbiAgICAgICAgICBqY2JSZWdleCArXG4gICAgICAgICAgXCJ8XCIgK1xuICAgICAgICAgIGRpc2NvdmVyUmVnZXggK1xuICAgICAgICAgIFwifFwiICtcbiAgICAgICAgICBtYXN0ZXJjYXJkUmVnZXggK1xuICAgICAgICAgIFwifFwiICtcbiAgICAgICAgICBkaW5lcnNjbHViUmVnZXhcbiAgICAgICkudGVzdChjb250cm9sLnZhbHVlKVxuICAgICkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHsgY3JlZGl0Y2FyZDogdHJ1ZSB9O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBhbWVyaWNhbkV4cHJlc3MoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0ge1xuICAgIGlmIChBYnN0cmFjdENvbnRyb2xVdGlsLmlzTm90UHJlc2VudChjb250cm9sKSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAobmV3IFJlZ0V4cChhbWVyaWNhbkV4cHJlc3NSZWdleCkudGVzdChjb250cm9sLnZhbHVlKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHsgYW1lcmljYW5FeHByZXNzOiB0cnVlIH07XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGRpbmVyc2NsdWIoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0ge1xuICAgIGlmIChBYnN0cmFjdENvbnRyb2xVdGlsLmlzTm90UHJlc2VudChjb250cm9sKSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAobmV3IFJlZ0V4cChkaW5lcnNjbHViUmVnZXgpLnRlc3QoY29udHJvbC52YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB7IGRpbmVyc2NsdWI6IHRydWUgfTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZGlzY292ZXIoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0ge1xuICAgIGlmIChBYnN0cmFjdENvbnRyb2xVdGlsLmlzTm90UHJlc2VudChjb250cm9sKSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAobmV3IFJlZ0V4cChkaXNjb3ZlclJlZ2V4KS50ZXN0KGNvbnRyb2wudmFsdWUpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4geyBkaXNjb3ZlcjogdHJ1ZSB9O1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgamNiKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9IHtcbiAgICBpZiAoQWJzdHJhY3RDb250cm9sVXRpbC5pc05vdFByZXNlbnQoY29udHJvbCkpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKG5ldyBSZWdFeHAoamNiUmVnZXgpLnRlc3QoY29udHJvbC52YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB7IGpjYjogdHJ1ZSB9O1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgbWFlc3Rybyhjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSB7XG4gICAgaWYgKEFic3RyYWN0Q29udHJvbFV0aWwuaXNOb3RQcmVzZW50KGNvbnRyb2wpKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGlmIChuZXcgUmVnRXhwKG1hZXN0cm9SZWdleCkudGVzdChjb250cm9sLnZhbHVlKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHsgbWFlc3RybzogdHJ1ZSB9O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBtYXN0ZXJjYXJkKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9IHtcbiAgICBpZiAoQWJzdHJhY3RDb250cm9sVXRpbC5pc05vdFByZXNlbnQoY29udHJvbCkpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKG5ldyBSZWdFeHAobWFzdGVyY2FyZFJlZ2V4KS50ZXN0KGNvbnRyb2wudmFsdWUpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4geyBtYXN0ZXJjYXJkOiB0cnVlIH07XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHZpc2EoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0ge1xuICAgIGlmIChBYnN0cmFjdENvbnRyb2xVdGlsLmlzTm90UHJlc2VudChjb250cm9sKSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAobmV3IFJlZ0V4cCh2aXNhUmVnZXgpLnRlc3QoY29udHJvbC52YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB7IHZpc2E6IHRydWUgfTtcbiAgfVxufVxuIl19