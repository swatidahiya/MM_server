var CreditCardValidatorDirective_1;
import * as tslib_1 from "tslib";
import { Directive, Input, forwardRef } from "@angular/core";
import { NG_VALIDATORS } from "@angular/forms";
import { CreditCardValidators } from "./creditcard-validators";
let CreditCardValidatorDirective = CreditCardValidatorDirective_1 = class CreditCardValidatorDirective {
    constructor() {
        this.creditCard = "all";
    }
    ngOnInit() {
        this.setCreditcardValidator(this.creditCard);
    }
    setCreditcardValidator(type) {
        switch (type) {
            case "all":
                this.validator = CreditCardValidators.isCreditCard;
                break;
            case "americanExpress":
                this.validator = CreditCardValidators.americanExpress;
                break;
            case "dinersclub":
                this.validator = CreditCardValidators.dinersclub;
                break;
            case "discover":
                this.validator = CreditCardValidators.discover;
                break;
            case "jcb":
                this.validator = CreditCardValidators.jcb;
                break;
            case "maestro":
                this.validator = CreditCardValidators.maestro;
                break;
            case "mastercard":
                this.validator = CreditCardValidators.mastercard;
                break;
            case "visa":
                this.validator = CreditCardValidators.visa;
                break;
            default:
                this.validator = CreditCardValidators.isCreditCard;
                break;
        }
    }
    ngOnChanges(changes) {
        if (changes.creditCard && !changes.creditCard.isFirstChange()) {
            this.setCreditcardValidator(changes.creditCard.currentValue);
            this.onChange();
        }
    }
    validate(c) {
        return this.validator(c);
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
};
tslib_1.__decorate([
    Input()
], CreditCardValidatorDirective.prototype, "creditCard", void 0);
CreditCardValidatorDirective = CreditCardValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "[creditCard][formControlName],[creditCard][formControl],[creditCard][ngModel]",
        providers: [
            {
                provide: NG_VALIDATORS,
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                useExisting: forwardRef(() => CreditCardValidatorDirective_1),
                multi: true,
            },
        ],
    })
], CreditCardValidatorDirective);
export { CreditCardValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGl0Y2FyZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvY3JlZGl0Y2FyZC9jcmVkaXRjYXJkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFDL0YsT0FBTyxFQUFFLGFBQWEsRUFBNkQsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxRyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQWEvRCxJQUFhLDRCQUE0QixvQ0FBekMsTUFBYSw0QkFBNEI7SUFYekM7UUFZVyxlQUFVLEdBQUcsS0FBSyxDQUFDO0lBdUQ5QixDQUFDO0lBbERDLFFBQVE7UUFDTixJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxJQUFZO1FBQ2pDLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxLQUFLO2dCQUNSLElBQUksQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUMsWUFBWSxDQUFDO2dCQUNuRCxNQUFNO1lBQ1IsS0FBSyxpQkFBaUI7Z0JBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUMsZUFBZSxDQUFDO2dCQUN0RCxNQUFNO1lBQ1IsS0FBSyxZQUFZO2dCQUNmLElBQUksQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUMsVUFBVSxDQUFDO2dCQUNqRCxNQUFNO1lBQ1IsS0FBSyxVQUFVO2dCQUNiLElBQUksQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDO2dCQUMvQyxNQUFNO1lBQ1IsS0FBSyxLQUFLO2dCQUNSLElBQUksQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDO2dCQUMxQyxNQUFNO1lBQ1IsS0FBSyxTQUFTO2dCQUNaLElBQUksQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUMsT0FBTyxDQUFDO2dCQUM5QyxNQUFNO1lBQ1IsS0FBSyxZQUFZO2dCQUNmLElBQUksQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUMsVUFBVSxDQUFDO2dCQUNqRCxNQUFNO1lBQ1IsS0FBSyxNQUFNO2dCQUNULElBQUksQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUMsSUFBSSxDQUFDO2dCQUMzQyxNQUFNO1lBQ1I7Z0JBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxZQUFZLENBQUM7Z0JBQ25ELE1BQU07U0FDVDtJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsVUFBVSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUM3RCxJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM3RCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDakI7SUFDSCxDQUFDO0lBRUQsUUFBUSxDQUFDLENBQWtCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQseUJBQXlCLENBQUMsRUFBYztRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0NBQ0YsQ0FBQTtBQXZEVTtJQUFSLEtBQUssRUFBRTtnRUFBb0I7QUFEakIsNEJBQTRCO0lBWHhDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSwrRUFBK0U7UUFDekYsU0FBUyxFQUFFO1lBQ1Q7Z0JBQ0UsT0FBTyxFQUFFLGFBQWE7Z0JBQ3RCLG1FQUFtRTtnQkFDbkUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyw4QkFBNEIsQ0FBQztnQkFDM0QsS0FBSyxFQUFFLElBQUk7YUFDWjtTQUNGO0tBQ0YsQ0FBQztHQUNXLDRCQUE0QixDQXdEeEM7U0F4RFksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgZm9yd2FyZFJlZiwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTkdfVkFMSURBVE9SUywgVmFsaWRhdG9yLCBWYWxpZGF0b3JGbiwgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5cbmltcG9ydCB7IENyZWRpdENhcmRWYWxpZGF0b3JzIH0gZnJvbSBcIi4vY3JlZGl0Y2FyZC12YWxpZGF0b3JzXCI7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogXCJbY3JlZGl0Q2FyZF1bZm9ybUNvbnRyb2xOYW1lXSxbY3JlZGl0Q2FyZF1bZm9ybUNvbnRyb2xdLFtjcmVkaXRDYXJkXVtuZ01vZGVsXVwiLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQ3JlZGl0Q2FyZFZhbGlkYXRvckRpcmVjdGl2ZSksXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBDcmVkaXRDYXJkVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yLCBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIGNyZWRpdENhcmQgPSBcImFsbFwiO1xuXG4gIHByaXZhdGUgdmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcbiAgcHJpdmF0ZSBvbkNoYW5nZTogKCkgPT4gdm9pZDtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldENyZWRpdGNhcmRWYWxpZGF0b3IodGhpcy5jcmVkaXRDYXJkKTtcbiAgfVxuXG4gIHNldENyZWRpdGNhcmRWYWxpZGF0b3IodHlwZTogc3RyaW5nKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiYWxsXCI6XG4gICAgICAgIHRoaXMudmFsaWRhdG9yID0gQ3JlZGl0Q2FyZFZhbGlkYXRvcnMuaXNDcmVkaXRDYXJkO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJhbWVyaWNhbkV4cHJlc3NcIjpcbiAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBDcmVkaXRDYXJkVmFsaWRhdG9ycy5hbWVyaWNhbkV4cHJlc3M7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRpbmVyc2NsdWJcIjpcbiAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBDcmVkaXRDYXJkVmFsaWRhdG9ycy5kaW5lcnNjbHViO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkaXNjb3ZlclwiOlxuICAgICAgICB0aGlzLnZhbGlkYXRvciA9IENyZWRpdENhcmRWYWxpZGF0b3JzLmRpc2NvdmVyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJqY2JcIjpcbiAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBDcmVkaXRDYXJkVmFsaWRhdG9ycy5qY2I7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1hZXN0cm9cIjpcbiAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBDcmVkaXRDYXJkVmFsaWRhdG9ycy5tYWVzdHJvO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJtYXN0ZXJjYXJkXCI6XG4gICAgICAgIHRoaXMudmFsaWRhdG9yID0gQ3JlZGl0Q2FyZFZhbGlkYXRvcnMubWFzdGVyY2FyZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidmlzYVwiOlxuICAgICAgICB0aGlzLnZhbGlkYXRvciA9IENyZWRpdENhcmRWYWxpZGF0b3JzLnZpc2E7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBDcmVkaXRDYXJkVmFsaWRhdG9ycy5pc0NyZWRpdENhcmQ7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy5jcmVkaXRDYXJkICYmICFjaGFuZ2VzLmNyZWRpdENhcmQuaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICB0aGlzLnNldENyZWRpdGNhcmRWYWxpZGF0b3IoY2hhbmdlcy5jcmVkaXRDYXJkLmN1cnJlbnRWYWx1ZSk7XG4gICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGUoYzogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yKGMpO1xuICB9XG5cbiAgcmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZShmbjogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxufVxuIl19