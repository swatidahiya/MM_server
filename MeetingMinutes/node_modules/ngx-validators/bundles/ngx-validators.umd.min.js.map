{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-validators/components/abstract-control-util.ts","ng://ngx-validators/components/password/password-validators.ts","ng://ngx-validators/components/email/email-util.ts","ng://ngx-validators/components/email/email-validators.ts","ng://ngx-validators/components/universal/universal-validators.ts","ng://ngx-validators/components/creditcard/creditcard-validators.ts","ng://ngx-validators/components/password/password.directive.ts","ng://ngx-validators/components/email/email.directive.ts","ng://ngx-validators/components/universal/universal.directive.ts","ng://ngx-validators/components/creditcard/creditcard.directive.ts","ng://ngx-validators/components/equal-to/equal-to.directive.ts","ng://ngx-validators/components/validators.module.ts","ng://ngx-validators/components/equal-to/equal-to-validator.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__values","o","m","Symbol","iterator","call","next","value","done","AbstractControlUtil","isNotPresent","control","addError","errorId","errors","hasError","setErrors","_a","removeError","keys","PasswordValidators","repeatCharacterRegexRule","repeatCount","pattern","RegExp","test","allowedCharacterRule","allowedChars","valid","invalidChars","value_1","tslib_1.__values","value_1_1","char","indexOf","push","alphabeticalCharacterRule","amount","stripped","replace","required","actual","digitCharacterRule","lowercaseCharacterRule","uppercaseCharacterRule","specialCharacterRule","mismatchedPasswords","passwordControlName","confirmPasswordControlName","group","get","EmailSuggestion","this","defaultOptions","domains","secondLevelDomains","topLevelDomains","prototype","suggest","email","options","opt","undefined","emailParts","splitEmail","toLowerCase","secondLevelDomain","topLevelDomain","closestDomain","findClosestDomain","domain","suggestion","address","full","closestSecondLevelDomain","closestTopLevelDomain","rtrn","parts","trim","split","result","pop","domainParts","j","substring","join","threshold","dist","minDist","Infinity","sift4Distance","s1","s2","maxOffset","l1","l2","c1","c2","lcss","localCS","trans","offsetArr","charAt","isTrans","ofs","Math","abs","splice","min","round","max","EmailValidators","simple","simpleEmailRule","normal","normalEmailRule","_this","emailSuggestion","UniversalValidators","noWhitespace","noWhitespaceRequired","noEmptyString","isNumber","isNaN","numberRequired","isInRange","minValue","maxValue","rangeValueToSmall","requiredMinValue","requiredMaxValue","rangeValueToBig","minLength","requiredMinLength","actualLength","maxLength","requiredMaxLength","visaRegex","maestroRegex","jcbRegex","mastercardRegex","CreditCardValidators","isCreditCard","americanExpressRegex","creditcard","americanExpress","dinersclub","discover","jcb","maestro","mastercard","visa","PasswordValidatorDirective","repeatCharacter","alphabeticalCharacter","digitCharacter","lowercaseCharacter","uppercaseCharacter","ngOnInit","repeatCharacterValidator","alphabeticalCharacterValidator","digitCharacterValidator","lowercaseCharacterValidator","uppercaseCharacterValidator","ngOnChanges","changes","inputChanged","currentValue","isFirstChange","onChange","validate","Validators","compose","registerOnValidatorChange","fn","tslib_1.__decorate","Input","PasswordValidatorDirective_1","Directive","selector","providers","provide","NG_VALIDATORS","useExisting","forwardRef","multi","EmailValidatorDirective","setValidator","type","validator","EmailValidatorDirective_1","EmailSuggestValidatorDirective","emailSuggest","EmailSuggestValidatorDirective_1","WhiteSpaceValidatorDirective","WhiteSpaceValidatorDirective_1","EmptyStringValidatorDirective","EmptyStringValidatorDirective_1","IsNumberValidatorDirective","IsNumberValidatorDirective_1","IsInRangeValidatorDirective","changed","IsInRangeValidatorDirective_1","MaxValidatorDirective","MaxValidatorDirective_1","MinValidatorDirective","MinValidatorDirective_1","CreditCardValidatorDirective","creditCard","setCreditcardValidator","CreditCardValidatorDirective_1","EqualToDirective","otherControl","equalTo","parent","subscription","valueChanges","pipe","delay","subscribe","updateValueAndValidity","notEqualTo","ngOnDestroy","unsubscribe","EqualToDirective_1","ValidatorsModule","NgModule","declarations","exports","EqualToValidator","c1Name","c2Name"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { AbstractControl } from \"@angular/forms\";\n\nexport class AbstractControlUtil {\n  static isNotPresent(control: AbstractControl): boolean {\n    const value = control.value;\n    if (value === undefined || value === null) {\n      return true;\n    }\n    return value !== \"\" ? false : true;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static addError(control: AbstractControl, errorId: string, value: any) {\n    if (!control.errors) {\n      control.setErrors({ [errorId]: value });\n    } else if (!control.hasError(errorId)) {\n      control.errors[errorId] = value;\n    }\n  }\n\n  static removeError(control: AbstractControl, errorId: string) {\n    if (control.errors && control.hasError(errorId)) {\n      if (Object.keys(control.errors).length > 1) {\n        delete control.errors[errorId];\n      } else {\n        control.setErrors(null);\n      }\n    }\n  }\n}\n","import { AbstractControl, ValidatorFn, ValidationErrors } from \"@angular/forms\";\nimport { AbstractControlUtil } from \"./../abstract-control-util\";\n\n// tslint:disable-next-line:variable-name\nexport class PasswordValidators {\n  public static repeatCharacterRegexRule(repeatCount: number) {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) return undefined;\n      const repeatDec = repeatCount - 1;\n      const pattern = \"([^\\\\x00-\\\\x1F])\\\\1{\" + repeatDec + \"}\";\n      if (control.value !== \"\" && new RegExp(pattern).test(control.value)) {\n        return { repeatCharacterRegexRule: { repeatCount } };\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n  public static allowedCharacterRule(allowedChars: string[]): ValidatorFn {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) return undefined;\n      const value: string = control.value;\n      let valid = true;\n      const invalidChars: string[] = [];\n\n      for (const char of value) {\n        if (allowedChars.indexOf(char) === -1) {\n          valid = false;\n          if (invalidChars.indexOf(char) === -1) {\n            invalidChars.push(char);\n          }\n        }\n      }\n      if (!valid) {\n        return {\n          allowedCharacterRule: {\n            invalidChars,\n            allowedChars,\n          },\n        };\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n  public static alphabeticalCharacterRule(amount: number): ValidatorFn {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) return undefined;\n      const value: string = control.value;\n      if (value.length === 0) {\n        return undefined;\n      }\n      const pattern = /[^A-Za-z]+/g;\n      const stripped = value.replace(pattern, \"\");\n      if (stripped.length < amount) {\n        return {\n          alphabeticalCharacterRule: {\n            required: amount,\n            actual: stripped.length,\n          },\n        };\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n  public static digitCharacterRule(amount: number): ValidatorFn {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) return undefined;\n      const value: string = control.value;\n      if (value.length === 0) {\n        return undefined;\n      }\n      const pattern = /[^0-9\\.]+/g;\n      const stripped = value.replace(pattern, \"\");\n      if (stripped.length < amount) {\n        return {\n          digitCharacterRule: { required: amount, actual: stripped.length },\n        };\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n  public static lowercaseCharacterRule(amount: number): ValidatorFn {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) return undefined;\n      const value: string = control.value;\n      if (value.length === 0) {\n        return undefined;\n      }\n      const pattern = /[^a-z]+/g;\n      const stripped = value.replace(pattern, \"\");\n      if (stripped.length < amount) {\n        return {\n          lowercaseCharacterRule: { required: amount, actual: stripped.length },\n        };\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n  public static uppercaseCharacterRule(amount: number): ValidatorFn {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) return undefined;\n      const value: string = control.value;\n      if (value.length === 0) {\n        return undefined;\n      }\n      const pattern = /[^A-Z]+/g;\n      const stripped = value.replace(pattern, \"\");\n      if (stripped.length < amount) {\n        return {\n          uppercaseCharacterRule: { required: amount, actual: stripped.length },\n        };\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n  public static specialCharacterRule(amount: number): ValidatorFn {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) return undefined;\n      const value: string = control.value;\n      if (value.length === 0) {\n        return undefined;\n      }\n      const pattern = /[\\w\\s]+/g;\n      const stripped = value.replace(pattern, \"\");\n      if (stripped.length < amount) {\n        return {\n          specialCharacterRule: { required: amount, actual: stripped.length },\n        };\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n  public static mismatchedPasswords(passwordControlName?: string, confirmPasswordControlName?: string): ValidatorFn {\n    const validator = (group: AbstractControl): ValidationErrors => {\n      const newPasswordValue = group.get(passwordControlName ? passwordControlName : \"newPassword\").value;\n      const newPasswordConfirmValue = group.get(\n        confirmPasswordControlName ? confirmPasswordControlName : \"confirmPassword\"\n      ).value;\n      if (newPasswordValue !== newPasswordConfirmValue) {\n        AbstractControlUtil.addError(\n          group.get(confirmPasswordControlName ? confirmPasswordControlName : \"confirmPassword\"),\n          \"mismatchedPasswords\",\n          true\n        );\n\n        return { mismatchedPasswords: true };\n      } else {\n        AbstractControlUtil.removeError(\n          group.get(confirmPasswordControlName ? confirmPasswordControlName : \"confirmPassword\"),\n          \"mismatchedPasswords\"\n        );\n      }\n      return undefined;\n    };\n    return validator;\n  }\n}\n","/*\n * Code fromMailcheck https://github.com/mailcheck/mailcheck\n * Author\n * Derrick Ko (@derrickko)\n *\n * Released under the MIT License.\n *\n * v 1.1.2\n */\n\nexport interface EmailOptions {\n  domains: string[];\n  secondLevelDomains: string[];\n  topLevelDomains: string[];\n}\n\nexport interface SplittedEmail {\n  topLevelDomain: string;\n  secondLevelDomain: string;\n  domain: string;\n  address: string;\n}\n\nexport interface Suggestion {\n  address: string;\n  domain: string;\n  full: string;\n}\n\ninterface Offset {\n  c1: number;\n  c2: number;\n  trans: boolean;\n}\n\nexport class EmailSuggestion {\n  private defaultOptions: EmailOptions = {\n    domains: [\n      \"msn.com\",\n      \"bellsouth.net\",\n      \"telus.net\",\n      \"comcast.net\",\n      \"optusnet.com.au\",\n      \"earthlink.net\",\n      \"qq.com\",\n      \"sky.com\",\n      \"icloud.com\",\n      \"mac.com\",\n      \"sympatico.ca\",\n      \"googlemail.com\",\n      \"att.net\",\n      \"xtra.co.nz\",\n      \"web.de\",\n      \"cox.net\",\n      \"gmail.com\",\n      \"ymail.com\",\n      \"yahoo.com\",\n      \"aim.com\",\n      \"rogers.com\",\n      \"verizon.net\",\n      \"rocketmail.com\",\n      \"google.com\",\n      \"optonline.net\",\n      \"sbcglobal.net\",\n      \"aol.com\",\n      \"me.com\",\n      \"btinternet.com\",\n      \"charter.net\",\n      \"shaw.ca\",\n    ],\n    secondLevelDomains: [\"yahoo\", \"hotmail\", \"mail\", \"live\", \"outlook\", \"gmx\"],\n    topLevelDomains: [\n      \"com\",\n      \"com.au\",\n      \"com.tw\",\n      \"ca\",\n      \"co.nz\",\n      \"co.uk\",\n      \"de\",\n      \"fr\",\n      \"it\",\n      \"ru\",\n      \"net\",\n      \"org\",\n      \"edu\",\n      \"gov\",\n      \"jp\",\n      \"nl\",\n      \"kr\",\n      \"se\",\n      \"eu\",\n      \"ie\",\n      \"co.il\",\n      \"us\",\n      \"at\",\n      \"be\",\n      \"dk\",\n      \"hk\",\n      \"es\",\n      \"gr\",\n      \"ch\",\n      \"no\",\n      \"cz\",\n      \"in\",\n      \"net\",\n      \"net.au\",\n      \"info\",\n      \"biz\",\n      \"mil\",\n      \"co.jp\",\n      \"sg\",\n      \"hu\",\n      \"uk\",\n    ],\n  };\n\n  public suggest(email: string, options?: EmailOptions): { [key: string]: Suggestion } {\n    let opt = this.defaultOptions;\n    if (options !== undefined) {\n      opt = options;\n    }\n    const emailParts = this.splitEmail(email.toLowerCase());\n\n    if (!emailParts) {\n      return undefined;\n    }\n\n    if (opt.secondLevelDomains && opt.topLevelDomains) {\n      // If the email is a valid 2nd-level + top-level, do not suggest anything.\n      if (\n        opt.secondLevelDomains.indexOf(emailParts.secondLevelDomain) !== -1 &&\n        opt.topLevelDomains.indexOf(emailParts.topLevelDomain) !== -1\n      ) {\n        return undefined;\n      }\n    }\n\n    let closestDomain = this.findClosestDomain(emailParts.domain, opt.domains, 2);\n    if (closestDomain) {\n      if (closestDomain === emailParts.domain) {\n        // The email address exactly matches one of the supplied domains; do not return a suggestion.\n        return undefined;\n      } else {\n        // The email address closely matches one of the supplied domains; return a suggestion\n        return {\n          suggestion: {\n            address: emailParts.address,\n            domain: closestDomain,\n            full: emailParts.address + \"@\" + closestDomain,\n          },\n        };\n      }\n    }\n\n    const closestSecondLevelDomain = this.findClosestDomain(emailParts.secondLevelDomain, opt.secondLevelDomains, 2);\n    const closestTopLevelDomain = this.findClosestDomain(emailParts.topLevelDomain, opt.topLevelDomains, 2);\n\n    if (emailParts.domain) {\n      closestDomain = emailParts.domain;\n      let rtrn = false;\n\n      if (closestSecondLevelDomain && closestSecondLevelDomain !== emailParts.secondLevelDomain) {\n        // The email address may have a mispelled second-level domain; return a suggestion\n        closestDomain = closestDomain.replace(emailParts.secondLevelDomain, closestSecondLevelDomain);\n        rtrn = true;\n      }\n\n      if (\n        closestTopLevelDomain &&\n        closestTopLevelDomain !== emailParts.topLevelDomain &&\n        emailParts.secondLevelDomain !== \"\"\n      ) {\n        // The email address may have a mispelled top-level domain; return a suggestion\n        closestDomain = closestDomain.replace(new RegExp(emailParts.topLevelDomain + \"$\"), closestTopLevelDomain);\n        rtrn = true;\n      }\n\n      if (rtrn) {\n        return {\n          suggestion: {\n            address: emailParts.address,\n            domain: closestDomain,\n            full: emailParts.address + \"@\" + closestDomain,\n          },\n        };\n      }\n    }\n\n    /* The email address exactly matches one of the supplied domains, does not closely\n     * match any domain and does not appear to simply have a mispelled top-level domain,\n     * or is an invalid email address; do not return a suggestion.\n     */\n    return undefined;\n  }\n\n  public splitEmail(email: string) {\n    const parts = email.trim().split(\"@\");\n\n    if (parts.length < 2) {\n      return undefined;\n    }\n\n    // tslint:disable-next-line: prefer-for-of\n    for (let i = 0; i < parts.length; i++) {\n      if (parts[i] === \"\") {\n        return undefined;\n      }\n    }\n\n    const result = {\n      topLevelDomain: \"\",\n      secondLevelDomain: \"\",\n      domain: parts.pop(),\n      address: \"\",\n    };\n\n    const domainParts = result.domain.split(\".\");\n\n    if (domainParts.length === 0) {\n      return undefined;\n    } else if (domainParts.length === 1) {\n      result.topLevelDomain = domainParts[0];\n    } else {\n      // The address has a domain and a top-level domain\n      result.secondLevelDomain = domainParts[0];\n      for (let j = 1; j < domainParts.length; j++) {\n        result.topLevelDomain += domainParts[j] + \".\";\n      }\n      result.topLevelDomain = result.topLevelDomain.substring(0, result.topLevelDomain.length - 1);\n    }\n\n    result.address = parts.join(\"@\");\n\n    return result;\n  }\n\n  private findClosestDomain(domain: string, domains: string[], threshold: number): string {\n    let dist;\n    let minDist = Infinity;\n    let closestDomain = null;\n\n    if (!domain || !domains) {\n      return undefined;\n    }\n\n    // tslint:disable-next-line: prefer-for-of\n    for (let i = 0; i < domains.length; i++) {\n      if (domain === domains[i]) {\n        return domain;\n      }\n      dist = this.sift4Distance(domain, domains[i], 5);\n      if (dist < minDist) {\n        minDist = dist;\n        closestDomain = domains[i];\n      }\n    }\n\n    if (minDist <= threshold && closestDomain !== null) {\n      return closestDomain;\n    } else {\n      return undefined;\n    }\n  }\n\n  private sift4Distance(s1: string, s2: string, maxOffset: number): number {\n    // sift4: https://siderite.blogspot.com/2014/11/super-fast-and-accurate-string-distance.html\n    if (maxOffset === undefined) {\n      maxOffset = 5; // default\n    }\n\n    if (!s1 || !s1.length) {\n      if (!s2) {\n        return 0;\n      }\n      return s2.length;\n    }\n\n    if (!s2 || !s2.length) {\n      return s1.length;\n    }\n\n    const l1 = s1.length;\n    const l2 = s2.length;\n\n    let c1 = 0; // cursor for string 1\n    let c2 = 0; // cursor for string 2\n    let lcss = 0; // largest common subsequence\n    let localCS = 0; // local common substring\n    let trans = 0; // number of transpositions ('ab' vs 'ba')\n    const offsetArr: Offset[] = []; // offset pair array, for computing the transpositions\n\n    while (c1 < l1 && c2 < l2) {\n      if (s1.charAt(c1) === s2.charAt(c2)) {\n        localCS++;\n        let isTrans = false;\n        // see if current match is a transposition\n        let i = 0;\n        while (i < offsetArr.length) {\n          const ofs = offsetArr[i];\n          if (c1 <= ofs.c1 || c2 <= ofs.c2) {\n            // when two matches cross, the one considered a transposition is the one with the largest difference in offsets\n            isTrans = Math.abs(c2 - c1) >= Math.abs(ofs.c2 - ofs.c1);\n            if (isTrans) {\n              trans++;\n            } else {\n              if (!ofs.trans) {\n                ofs.trans = true;\n                trans++;\n              }\n            }\n            break;\n          } else {\n            if (c1 > ofs.c2 && c2 > ofs.c1) {\n              offsetArr.splice(i, 1);\n            } else {\n              i++;\n            }\n          }\n        }\n        offsetArr.push({\n          c1,\n          c2,\n          trans: isTrans,\n        });\n      } else {\n        lcss += localCS;\n        localCS = 0;\n        if (c1 !== c2) {\n          c1 = c2 = Math.min(c1, c2); // using min allows the computation of transpositions\n        }\n        // if matching characters are found, remove 1 from both cursors (they get incremented at the end of the loop)\n        // so that we can have only one code block handling matches\n        for (let j = 0; j < maxOffset && (c1 + j < l1 || c2 + j < l2); j++) {\n          if (c1 + j < l1 && s1.charAt(c1 + j) === s2.charAt(c2)) {\n            c1 += j - 1;\n            c2--;\n            break;\n          }\n          if (c2 + j < l2 && s1.charAt(c1) === s2.charAt(c2 + j)) {\n            c1--;\n            c2 += j - 1;\n            break;\n          }\n        }\n      }\n      c1++;\n      c2++;\n      // this covers the case where the last match is on the last token in list, so that it can compute transpositions correctly\n      if (c1 >= l1 || c2 >= l2) {\n        lcss += localCS;\n        localCS = 0;\n        c1 = c2 = Math.min(c1, c2);\n      }\n    }\n    lcss += localCS;\n    return Math.round(Math.max(l1, l2) - lcss + trans); // add the cost of transpositions to the final result\n  }\n}\n","import { AbstractControl, ValidatorFn, ValidationErrors } from \"@angular/forms\";\nimport { AbstractControlUtil } from \"./../abstract-control-util\";\nimport { EmailSuggestion, EmailOptions } from \"./email-util\";\n\nexport class EmailValidators {\n  private static emailSuggestion: EmailSuggestion = new EmailSuggestion();\n\n  public static simple(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) {\n      return undefined;\n    }\n\n    const pattern = /.+@.+\\..+/i;\n    if (pattern.test(control.value)) {\n      return undefined;\n    }\n    return { simpleEmailRule: true };\n  }\n\n  // https://www.w3.org/TR/html5/forms.html#valid-e-mail-address\n  public static normal(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) {\n      return undefined;\n    }\n    // tslint:disable-next-line:max-line-length\n    const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n    if (pattern.test(control.value)) {\n      return undefined;\n    }\n    return { normalEmailRule: true };\n  }\n\n  public static suggest(options?: EmailOptions): ValidatorFn {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) {\n        return undefined;\n      }\n      return this.emailSuggestion.suggest(control.value, options);\n    };\n    return validator;\n  }\n}\n","import { AbstractControl, ValidatorFn, ValidationErrors } from \"@angular/forms\";\nimport { AbstractControlUtil } from \"../abstract-control-util\";\n\nexport class UniversalValidators {\n  public static noWhitespace(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) return undefined;\n    const pattern = \"\\\\s\";\n    if (new RegExp(pattern).test(control.value)) {\n      return { noWhitespaceRequired: true };\n    }\n    return undefined;\n  }\n\n  public static noEmptyString(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) return undefined;\n    if (control.value.trim().length === 0) {\n      return { noEmptyString: true };\n    }\n    return undefined;\n  }\n\n  public static isNumber(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) return undefined;\n    if (isNaN(control.value)) {\n      return { numberRequired: true };\n    }\n    return undefined;\n  }\n\n  public static isInRange(minValue: number, maxValue: number): ValidatorFn {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) return undefined;\n      if (isNaN(control.value)) {\n        return { numberRequired: true };\n      }\n      if (+control.value < minValue) {\n        return {\n          rangeValueToSmall: {\n            requiredMinValue: minValue,\n            requiredMaxValue: maxValue,\n            actual: control.value,\n          },\n        };\n      }\n\n      if (+control.value > maxValue) {\n        return {\n          rangeValueToBig: {\n            requiredMinValue: minValue,\n            requiredMaxValue: maxValue,\n            actual: control.value,\n          },\n        };\n      } else {\n        return undefined;\n      }\n    };\n    return validator;\n  }\n\n  public static minLength(minLength: number) {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) return undefined;\n      const value: string = control.value;\n      if (value.length >= minLength) {\n        return undefined;\n      }\n      return {\n        minLength: { requiredMinLength: minLength, actualLength: value.length },\n      };\n    };\n    return validator;\n  }\n\n  public static maxLength(maxLength: number) {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) return undefined;\n      const value: string = control.value;\n      if (maxLength >= value.length) {\n        return undefined;\n      }\n      return {\n        maxLength: { requiredMaxLength: maxLength, actualLength: value.length },\n      };\n    };\n    return validator;\n  }\n\n  public static min(min: number) {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) return undefined;\n      const value: string = control.value;\n      if (isNaN(control.value)) {\n        return { numberRequired: true };\n      }\n      if (+value >= min) {\n        return undefined;\n      }\n      return { min: { required: min, actual: control.value } };\n    };\n    return validator;\n  }\n\n  public static max(max: number) {\n    const validator = (control: AbstractControl): ValidationErrors => {\n      if (AbstractControlUtil.isNotPresent(control)) return undefined;\n      const value: string = control.value;\n      if (isNaN(control.value)) {\n        return { numberRequired: true };\n      }\n      if (max >= +value) {\n        return undefined;\n      }\n      return { max: { required: max, actual: control.value } };\n    };\n    return validator;\n  }\n}\n","import { AbstractControl } from \"@angular/forms\";\nimport { AbstractControlUtil } from \"./../abstract-control-util\";\n\nconst visaRegex = \"^(?:4[0-9]{12})(?:[0-9]{3})?$\";\nconst americanExpressRegex = \"^(?:3[47][0-9]{13})$\";\nconst maestroRegex = \"^(?:(?:5[0678]\\\\d\\\\d|6304|6390|67\\\\d\\\\d)\\\\d{8,15})$\";\nconst jcbRegex = \"^(?:(?:2131|1800|35\\\\d{3})\\\\d{11})$\";\nconst discoverRegex = \"^(?:6(?:011|5[0-9]{2})(?:[0-9]{12}))$\";\nconst dinersclubRegex = \"^(?:3(?:0[0-5]|[68][0-9])[0-9]{11})$\";\nconst mastercardRegex = \"^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$\";\n\nexport class CreditCardValidators {\n  public static isCreditCard(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) return undefined;\n    if (\n      new RegExp(\n        americanExpressRegex +\n          \"|\" +\n          visaRegex +\n          \"|\" +\n          maestroRegex +\n          \"|\" +\n          jcbRegex +\n          \"|\" +\n          discoverRegex +\n          \"|\" +\n          mastercardRegex +\n          \"|\" +\n          dinersclubRegex\n      ).test(control.value)\n    ) {\n      return undefined;\n    }\n    return { creditcard: true };\n  }\n\n  public static americanExpress(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) return undefined;\n    if (new RegExp(americanExpressRegex).test(control.value)) {\n      return undefined;\n    }\n    return { americanExpress: true };\n  }\n\n  public static dinersclub(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) return undefined;\n    if (new RegExp(dinersclubRegex).test(control.value)) {\n      return undefined;\n    }\n    return { dinersclub: true };\n  }\n\n  public static discover(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) return undefined;\n    if (new RegExp(discoverRegex).test(control.value)) {\n      return undefined;\n    }\n    return { discover: true };\n  }\n  public static jcb(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) return undefined;\n    if (new RegExp(jcbRegex).test(control.value)) {\n      return undefined;\n    }\n    return { jcb: true };\n  }\n  public static maestro(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) return undefined;\n    if (new RegExp(maestroRegex).test(control.value)) {\n      return undefined;\n    }\n    return { maestro: true };\n  }\n\n  public static mastercard(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) return undefined;\n    if (new RegExp(mastercardRegex).test(control.value)) {\n      return undefined;\n    }\n    return { mastercard: true };\n  }\n\n  public static visa(control: AbstractControl): { [key: string]: boolean } {\n    if (AbstractControlUtil.isNotPresent(control)) return undefined;\n    if (new RegExp(visaRegex).test(control.value)) {\n      return undefined;\n    }\n    return { visa: true };\n  }\n}\n","import { Directive, Input, forwardRef, OnInit, SimpleChanges, OnChanges } from \"@angular/core\";\nimport { NG_VALIDATORS, Validator, Validators, ValidatorFn, AbstractControl, ValidationErrors } from \"@angular/forms\";\n\nimport { PasswordValidators } from \"./password-validators\";\n\n@Directive({\n  selector: \"[password][formControlName],[password][formControl],[password][ngModel]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => PasswordValidatorDirective),\n      multi: true,\n    },\n  ],\n})\nexport class PasswordValidatorDirective implements Validator, OnInit, OnChanges {\n  @Input() repeatCharacter = 4;\n  @Input() alphabeticalCharacter = 1;\n  @Input() digitCharacter = 1;\n  @Input() lowercaseCharacter = 1;\n  @Input() uppercaseCharacter = 1;\n\n  private repeatCharacterValidator: ValidatorFn;\n  private alphabeticalCharacterValidator: ValidatorFn;\n  private digitCharacterValidator: ValidatorFn;\n  private lowercaseCharacterValidator: ValidatorFn;\n  private uppercaseCharacterValidator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.repeatCharacterValidator = PasswordValidators.repeatCharacterRegexRule(this.repeatCharacter);\n    this.alphabeticalCharacterValidator = PasswordValidators.alphabeticalCharacterRule(this.alphabeticalCharacter);\n    this.digitCharacterValidator = PasswordValidators.digitCharacterRule(this.digitCharacter);\n    this.lowercaseCharacterValidator = PasswordValidators.lowercaseCharacterRule(this.lowercaseCharacter);\n    this.uppercaseCharacterValidator = PasswordValidators.uppercaseCharacterRule(this.uppercaseCharacter);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    let inputChanged = false;\n    if (changes.repeatCharacter) {\n      this.repeatCharacterValidator = PasswordValidators.repeatCharacterRegexRule(changes.repeatCharacter.currentValue);\n      inputChanged = changes.repeatCharacter.isFirstChange() ? false : true;\n    }\n\n    if (changes.alphabeticalCharacter) {\n      this.alphabeticalCharacterValidator = PasswordValidators.alphabeticalCharacterRule(\n        changes.alphabeticalCharacter.currentValue\n      );\n      inputChanged = changes.alphabeticalCharacter.isFirstChange() ? false : true;\n    }\n\n    if (changes.digitCharacter) {\n      this.digitCharacterValidator = PasswordValidators.digitCharacterRule(changes.digitCharacter.currentValue);\n      inputChanged = changes.digitCharacter.isFirstChange() ? false : true;\n    }\n\n    if (changes.lowercaseCharacter) {\n      this.lowercaseCharacterValidator = PasswordValidators.lowercaseCharacterRule(\n        changes.lowercaseCharacter.currentValue\n      );\n      inputChanged = changes.lowercaseCharacter.isFirstChange() ? false : true;\n    }\n\n    if (changes.uppercaseCharacter) {\n      this.uppercaseCharacterValidator = PasswordValidators.uppercaseCharacterRule(\n        changes.uppercaseCharacter.currentValue\n      );\n      inputChanged = changes.uppercaseCharacter.isFirstChange() ? false : true;\n    }\n\n    if (inputChanged) {\n      this.onChange();\n    }\n  }\n\n  validate(c: AbstractControl): ValidationErrors {\n    const compose: ValidatorFn = Validators.compose([\n      this.repeatCharacterValidator,\n      this.digitCharacterValidator,\n      this.alphabeticalCharacterValidator,\n      this.lowercaseCharacterValidator,\n      this.uppercaseCharacterValidator,\n    ]);\n    return compose(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { EmailOptions } from \"./email-util\";\nimport { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl, ValidationErrors } from \"@angular/forms\";\n\nimport { EmailValidators } from \"./email-validators\";\n\n@Directive({\n  selector: \"[email][formControlName],[email][formControl],[email][ngModel]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => EmailValidatorDirective),\n      multi: true,\n    },\n  ],\n})\nexport class EmailValidatorDirective implements Validator, OnInit, OnChanges {\n  @Input() email: \"normal\" | \"simple\" = \"normal\";\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.setValidator(this.email);\n  }\n\n  setValidator(type: string) {\n    switch (type) {\n      case \"simple\":\n        this.validator = EmailValidators.simple;\n        break;\n      case \"normal\":\n        this.validator = EmailValidators.normal;\n        break;\n      default:\n        this.validator = EmailValidators.normal;\n        break;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.email && !changes.email.isFirstChange()) {\n      this.setValidator(changes.email.currentValue);\n      this.onChange();\n    }\n  }\n\n  registerOnValidatorChange?(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors {\n    return this.validator(c);\n  }\n}\n\n@Directive({\n  selector: \"[emailSuggest][formControlName],[emailSuggest][formControl],[emailSuggest][ngModel]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => EmailSuggestValidatorDirective),\n      multi: true,\n    },\n  ],\n})\nexport class EmailSuggestValidatorDirective implements Validator, OnInit, OnChanges {\n  @Input() emailSuggest: EmailOptions;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = EmailValidators.suggest(this.emailSuggest);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.emailSuggest && !changes.emailSuggest.isFirstChange()) {\n      this.validator = EmailValidators.suggest(changes.emailSuggest.currentValue);\n      this.onChange();\n    }\n  }\n\n  registerOnValidatorChange?(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors {\n    return this.validator(c);\n  }\n}\n","import { Directive, forwardRef, Input, OnInit, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { AbstractControl, NG_VALIDATORS, Validator, ValidatorFn, ValidationErrors } from \"@angular/forms\";\n\nimport { UniversalValidators } from \"./universal-validators\";\n\n@Directive({\n  selector: \"[noWhitespace][formControlName],[noWhitespace][formControl],[noWhitespace][ngModel]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => WhiteSpaceValidatorDirective),\n      multi: true,\n    },\n  ],\n})\nexport class WhiteSpaceValidatorDirective implements Validator, OnInit {\n  private validator: ValidatorFn;\n\n  ngOnInit() {\n    this.validator = UniversalValidators.noWhitespace;\n  }\n\n  validate(c: AbstractControl): ValidationErrors {\n    return this.validator(c);\n  }\n}\n\n@Directive({\n  selector: \"[noEmptyString][formControlName],[noEmptyString][formControl],[noEmptyString][ngModel]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => EmptyStringValidatorDirective),\n      multi: true,\n    },\n  ],\n})\nexport class EmptyStringValidatorDirective implements Validator, OnInit {\n  private validator: ValidatorFn;\n\n  ngOnInit() {\n    this.validator = UniversalValidators.noEmptyString;\n  }\n\n  validate(c: AbstractControl): ValidationErrors {\n    return this.validator(c);\n  }\n}\n\n@Directive({\n  selector: \"[isNumber][formControlName],[isNumber][formControl],[isNumber][ngModel]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => IsNumberValidatorDirective),\n      multi: true,\n    },\n  ],\n})\nexport class IsNumberValidatorDirective implements Validator, OnInit {\n  private validator: ValidatorFn;\n\n  ngOnInit() {\n    this.validator = UniversalValidators.isNumber;\n  }\n\n  validate(c: AbstractControl): ValidationErrors {\n    return this.validator(c);\n  }\n}\n\n@Directive({\n  selector: \"[isInRange][formControlName],[isInRange][formControl],[isInRange][ngModel]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => IsInRangeValidatorDirective),\n      multi: true,\n    },\n  ],\n})\nexport class IsInRangeValidatorDirective implements Validator, OnInit, OnChanges {\n  @Input() minValue: number;\n  @Input() maxValue: number;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = UniversalValidators.isInRange(this.minValue, this.maxValue);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    let minValue = this.minValue;\n    let maxValue = this.maxValue;\n    let changed = false;\n\n    if (changes.minValue) {\n      minValue = changes.minValue.currentValue;\n      changed = changes.minValue.isFirstChange() ? false : true;\n    }\n\n    if (changes.maxValue) {\n      maxValue = changes.maxValue.currentValue;\n      changed = changes.maxValue.isFirstChange() ? false : true;\n    }\n\n    if (changed) {\n      this.validator = UniversalValidators.isInRange(minValue, maxValue);\n      this.onChange();\n    }\n  }\n\n  validate(c: AbstractControl): ValidationErrors {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n\n@Directive({\n  selector: \"input[type=text][max][formControlName],input[type=text][max][formControl],input[type=text][max][ngModel]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => MaxValidatorDirective),\n      multi: true,\n    },\n  ],\n})\nexport class MaxValidatorDirective implements Validator, OnInit, OnChanges {\n  @Input() max: number;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = UniversalValidators.max(this.max);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.max && !changes.max.isFirstChange()) {\n      this.validator = UniversalValidators.max(changes.max.currentValue);\n      this.onChange();\n    }\n  }\n\n  validate(c: AbstractControl): ValidationErrors {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n\n@Directive({\n  selector: \"input[type=text][min][formControlName],input[type=text][min][formControl],input[type=text][min][ngModel]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => MinValidatorDirective),\n      multi: true,\n    },\n  ],\n})\nexport class MinValidatorDirective implements Validator, OnInit, OnChanges {\n  @Input() min: number;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = UniversalValidators.min(this.min);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.min && !changes.min.isFirstChange()) {\n      this.validator = UniversalValidators.min(changes.min.currentValue);\n      this.onChange();\n    }\n  }\n\n  validate(c: AbstractControl): ValidationErrors {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { Directive, Input, forwardRef, OnInit, SimpleChanges, OnChanges } from \"@angular/core\";\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl, ValidationErrors } from \"@angular/forms\";\n\nimport { CreditCardValidators } from \"./creditcard-validators\";\n\n@Directive({\n  selector: \"[creditCard][formControlName],[creditCard][formControl],[creditCard][ngModel]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      useExisting: forwardRef(() => CreditCardValidatorDirective),\n      multi: true,\n    },\n  ],\n})\nexport class CreditCardValidatorDirective implements Validator, OnInit, OnChanges {\n  @Input() creditCard = \"all\";\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.setCreditcardValidator(this.creditCard);\n  }\n\n  setCreditcardValidator(type: string) {\n    switch (type) {\n      case \"all\":\n        this.validator = CreditCardValidators.isCreditCard;\n        break;\n      case \"americanExpress\":\n        this.validator = CreditCardValidators.americanExpress;\n        break;\n      case \"dinersclub\":\n        this.validator = CreditCardValidators.dinersclub;\n        break;\n      case \"discover\":\n        this.validator = CreditCardValidators.discover;\n        break;\n      case \"jcb\":\n        this.validator = CreditCardValidators.jcb;\n        break;\n      case \"maestro\":\n        this.validator = CreditCardValidators.maestro;\n        break;\n      case \"mastercard\":\n        this.validator = CreditCardValidators.mastercard;\n        break;\n      case \"visa\":\n        this.validator = CreditCardValidators.visa;\n        break;\n      default:\n        this.validator = CreditCardValidators.isCreditCard;\n        break;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.creditCard && !changes.creditCard.isFirstChange()) {\n      this.setCreditcardValidator(changes.creditCard.currentValue);\n      this.onChange();\n    }\n  }\n\n  validate(c: AbstractControl): ValidationErrors {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { Directive, forwardRef, Input, OnDestroy, SimpleChanges, OnChanges } from \"@angular/core\";\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from \"@angular/forms\";\nimport { Subscription } from \"rxjs\";\nimport { delay } from \"rxjs/operators\";\n\n@Directive({\n  selector: \"[equalTo][ngModel], [equalTo][formControlName], [equalTo][formControl]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => EqualToDirective),\n      multi: true,\n    },\n  ],\n})\nexport class EqualToDirective implements Validator, OnDestroy, OnChanges {\n  @Input() equalTo: string | AbstractControl;\n\n  private subscription: Subscription;\n  private onChange: () => void;\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    const otherControl = typeof this.equalTo === \"string\" ? c.parent.get(this.equalTo) : this.equalTo;\n\n    if (!this.subscription) {\n      this.subscription = otherControl.valueChanges.pipe(delay(1)).subscribe(() => {\n        c.updateValueAndValidity();\n      });\n    }\n    return c.value !== otherControl.value ? { notEqualTo: true } : null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.equalTo && !changes.equalTo.isFirstChange()) {\n      this.onChange();\n    }\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import {\n  EmptyStringValidatorDirective,\n  IsInRangeValidatorDirective,\n  IsNumberValidatorDirective,\n  MaxValidatorDirective,\n  MinValidatorDirective,\n  WhiteSpaceValidatorDirective,\n} from \"./universal/universal.directive\";\nimport { NgModule } from \"@angular/core\";\n\nimport { CreditCardValidatorDirective } from \"./creditcard/creditcard.directive\";\nimport { EmailValidatorDirective, EmailSuggestValidatorDirective } from \"./email/email.directive\";\nimport { PasswordValidatorDirective } from \"./password/password.directive\";\nimport { EqualToDirective } from \"./equal-to/equal-to.directive\";\n\n@NgModule({\n  declarations: [\n    CreditCardValidatorDirective,\n    EmailValidatorDirective,\n    EmailSuggestValidatorDirective,\n    PasswordValidatorDirective,\n    IsInRangeValidatorDirective,\n    IsNumberValidatorDirective,\n    MaxValidatorDirective,\n    MinValidatorDirective,\n    WhiteSpaceValidatorDirective,\n    EmptyStringValidatorDirective,\n    EqualToDirective,\n  ],\n  exports: [\n    CreditCardValidatorDirective,\n    EmailValidatorDirective,\n    EmailSuggestValidatorDirective,\n    PasswordValidatorDirective,\n    IsInRangeValidatorDirective,\n    IsNumberValidatorDirective,\n    MaxValidatorDirective,\n    MinValidatorDirective,\n    WhiteSpaceValidatorDirective,\n    EmptyStringValidatorDirective,\n    EqualToDirective,\n  ],\n})\nexport class ValidatorsModule {}\n","import { AbstractControl, ValidatorFn } from \"@angular/forms\";\nimport { AbstractControlUtil } from \"../abstract-control-util\";\n\nexport class EqualToValidator {\n  static equalTo(c1Name: string, c2Name: string): ValidatorFn {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const validator = (parent: AbstractControl): any => {\n      const c1 = parent.get(c1Name);\n      const c2 = parent.get(c2Name);\n\n      if (c1.value === c2.value) {\n        AbstractControlUtil.removeError(c2, \"notEqualTo\");\n      } else {\n        AbstractControlUtil.addError(c2, \"notEqualTo\", true);\n      }\n    };\n    return validator;\n  }\n}\n"]}