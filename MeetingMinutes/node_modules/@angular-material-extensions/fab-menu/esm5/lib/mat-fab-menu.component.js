import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { speedDialFabAnimations } from './mat-fab-menu.animations';
var MatFabMenuComponent = /** @class */ (function () {
    function MatFabMenuComponent() {
        this.icon = 'add';
        this.direction = 'top';
        this.color = 'accent';
        this.closeAfterSelection = true;
        // tslint:disable-next-line:no-output-on-prefix
        this.onFabMenuItemSelected = new EventEmitter();
    }
    MatFabMenuComponent.prototype.ngOnInit = function () {
        this.adjustLayout();
    };
    MatFabMenuComponent.prototype.ngOnChanges = function (changes) {
        if (changes.direction && !changes.direction.firstChange) {
            this.direction = changes.direction.currentValue;
            this.adjustLayout();
        }
        if (changes.color && !changes.color.firstChange) {
            this.color = changes.color.currentValue;
        }
        if (changes.fabButtons && !changes.fabButtons.firstChange) {
            this.fabButtons = changes.fabButtons.currentValue;
        }
    };
    MatFabMenuComponent.prototype.adjustLayout = function () {
        switch (this.direction) {
            case 'top':
                this.layout = 'column-reverse';
                this.layout2 = 'column-reverse';
                break;
            case 'bottom':
                this.layout = 'column';
                this.layout2 = 'column';
                break;
            case 'left':
                this.layout = 'row-reverse';
                this.layout2 = 'row-reverse';
                break;
            case 'right':
                this.layout = 'row';
                this.layout2 = 'row';
                break;
        }
    };
    MatFabMenuComponent.prototype.toggle = function () {
        this.isActive = !this.isActive;
    };
    MatFabMenuComponent.prototype.selectFabMenu = function (fab) {
        this.onFabMenuItemSelected.emit(fab.id);
        if (this.closeAfterSelection) {
            this.isActive = false;
        }
    };
    __decorate([
        Input()
    ], MatFabMenuComponent.prototype, "fabButtons", void 0);
    __decorate([
        Input()
    ], MatFabMenuComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], MatFabMenuComponent.prototype, "direction", void 0);
    __decorate([
        Input()
    ], MatFabMenuComponent.prototype, "color", void 0);
    __decorate([
        Input()
    ], MatFabMenuComponent.prototype, "isActive", void 0);
    __decorate([
        Input()
    ], MatFabMenuComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], MatFabMenuComponent.prototype, "closeAfterSelection", void 0);
    __decorate([
        Output()
    ], MatFabMenuComponent.prototype, "onFabMenuItemSelected", void 0);
    MatFabMenuComponent = __decorate([
        Component({
            selector: 'mat-fab-menu',
            template: "<div [fxLayout]=\"layout\" class=\"container\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n  <div fxLayoutAlign=\"center\">\n    <button (click)=\"isActive = !isActive\"\n            [color]=\"color\" [disabled]=\"disabled\"\n            [ngClass]=\"{\n    'mat-fab' : !isActive,\n    'mat-mini-fab' : isActive\n  }\"\n            mat-fab>\n      <mat-icon [@fabToggler]=\"{value: isActive}\">{{icon}}</mat-icon> <!-- Animation here -->\n    </button>\n  </div>\n  <div *ngIf=\"isActive\" [@fabsStagger]=\"fabButtons.length\"\n       [fxLayout]=\"layout2\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n    <button (click)=\"selectFabMenu(fab)\"\n            *ngFor=\"let fab of fabButtons\"\n            [color]=\"fab?.color\"\n            [matTooltip]=\"fab?.tooltip\"\n            [matTooltipPosition]=\"fab?.tooltipPosition\"\n            [ngClass]=\"{'fullSVG' : fab?.imgUrl}\"\n            mat-fab>\n      <mat-icon *ngIf=\"fab?.icon\" [color]=\"fab?.iconColor\">{{fab?.icon}}</mat-icon>\n      <img *ngIf=\"fab?.imgUrl\" [src]=\"fab?.imgUrl\" alt=\"icon\">\n    </button>\n  </div>\n</div>\n",
            animations: speedDialFabAnimations,
            styles: [":host{display:block}.fullSVG img{width:100%}.fullSVG ::ng-deep span.mat-button-wrapper{padding:0}.container>div{margin-bottom:5px}.container>div button{margin-bottom:16px}"]
        })
    ], MatFabMenuComponent);
    return MatFabMenuComponent;
}());
export { MatFabMenuComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LWZhYi1tZW51LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLW1hdGVyaWFsLWV4dGVuc2lvbnMvZmFiLW1lbnUvIiwic291cmNlcyI6WyJsaWIvbWF0LWZhYi1tZW51LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZHLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBc0JqRTtJQThCRTtRQXhCQSxTQUFJLEdBQUcsS0FBSyxDQUFDO1FBR2IsY0FBUyxHQUF3QixLQUFLLENBQUM7UUFHdkMsVUFBSyxHQUFpQixRQUFRLENBQUM7UUFTL0Isd0JBQW1CLEdBQUcsSUFBSSxDQUFDO1FBRTNCLCtDQUErQztRQUUvQywwQkFBcUIsR0FBa0MsSUFBSSxZQUFZLEVBQW1CLENBQUM7SUFNM0YsQ0FBQztJQUVELHNDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELHlDQUFXLEdBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxTQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRTtZQUN2RCxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1lBQ2hELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNyQjtRQUVELElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFO1lBQy9DLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7U0FDekM7UUFFRCxJQUFJLE9BQU8sQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRTtZQUN6RCxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDO1NBQ25EO0lBQ0gsQ0FBQztJQUVELDBDQUFZLEdBQVo7UUFDRSxRQUFRLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDdEIsS0FBSyxLQUFLO2dCQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUM7Z0JBQ2hDLE1BQU07WUFFUixLQUFLLFFBQVE7Z0JBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDO2dCQUN4QixNQUFNO1lBRVIsS0FBSyxNQUFNO2dCQUNULElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDO2dCQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQztnQkFDN0IsTUFBTTtZQUVSLEtBQUssT0FBTztnQkFDVixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQkFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Z0JBQ3JCLE1BQU07U0FDVDtJQUNILENBQUM7SUFFRCxvQ0FBTSxHQUFOO1FBQ0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDakMsQ0FBQztJQUVELDJDQUFhLEdBQWIsVUFBYyxHQUFlO1FBQzNCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQWxGRDtRQURDLEtBQUssRUFBRTsyREFDaUI7SUFHekI7UUFEQyxLQUFLLEVBQUU7cURBQ0s7SUFHYjtRQURDLEtBQUssRUFBRTswREFDK0I7SUFHdkM7UUFEQyxLQUFLLEVBQUU7c0RBQ3VCO0lBRy9CO1FBREMsS0FBSyxFQUFFO3lEQUNVO0lBR2xCO1FBREMsS0FBSyxFQUFFO3lEQUNVO0lBR2xCO1FBREMsS0FBSyxFQUFFO29FQUNtQjtJQUkzQjtRQURDLE1BQU0sRUFBRTtzRUFDa0Y7SUF6QmhGLG1CQUFtQjtRQU4vQixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsY0FBYztZQUN4QiwwbUNBQTBDO1lBRTFDLFVBQVUsRUFBRSxzQkFBc0I7O1NBQ25DLENBQUM7T0FDVyxtQkFBbUIsQ0FzRi9CO0lBQUQsMEJBQUM7Q0FBQSxBQXRGRCxJQXNGQztTQXRGWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCwgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3NwZWVkRGlhbEZhYkFuaW1hdGlvbnN9IGZyb20gJy4vbWF0LWZhYi1tZW51LmFuaW1hdGlvbnMnO1xuaW1wb3J0IHsgVGhlbWVQYWxldHRlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZSc7XG5pbXBvcnQgeyBUb29sdGlwUG9zaXRpb24gfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC90b29sdGlwJztcblxuZXhwb3J0IGludGVyZmFjZSBNYXRGYWJNZW51IHtcbiAgaWQ6IHN0cmluZyB8IG51bWJlcjtcbiAgaWNvbj86IHN0cmluZzsgLy8gcGxlYXNlIHVzZSBlaXRoZXIgaWNvbiBvciBpbWdVcmxcbiAgaWNvbkNvbG9yPzogVGhlbWVQYWxldHRlO1xuICBpbWdVcmw/OiBzdHJpbmc7IC8vIHBsZWFzZSB1c2UgZWl0aGVyIGljb24gb3IgaW1nVXJsXG4gIHRvb2x0aXA/OiBzdHJpbmc7XG4gIHRvb2x0aXBQb3NpdGlvbj86IFRvb2x0aXBQb3NpdGlvbjtcbiAgY29sb3I/OiBUaGVtZVBhbGV0dGU7XG59XG5cbmV4cG9ydCB0eXBlIE1hdEZhYk1lbnVEaXJlY3Rpb24gPSAndG9wJyB8ICdib3R0b20nIHwgJ2xlZnQnIHwgJ3JpZ2h0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWF0LWZhYi1tZW51JyxcbiAgdGVtcGxhdGVVcmw6ICdtYXQtZmFiLW1lbnUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnbWF0LWZhYi1tZW51LmNvbXBvbmVudC5zY3NzJ10sXG4gIGFuaW1hdGlvbnM6IHNwZWVkRGlhbEZhYkFuaW1hdGlvbnNcbn0pXG5leHBvcnQgY2xhc3MgTWF0RmFiTWVudUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoKVxuICBmYWJCdXR0b25zOiBNYXRGYWJNZW51W107XG5cbiAgQElucHV0KClcbiAgaWNvbiA9ICdhZGQnO1xuXG4gIEBJbnB1dCgpXG4gIGRpcmVjdGlvbjogTWF0RmFiTWVudURpcmVjdGlvbiA9ICd0b3AnO1xuXG4gIEBJbnB1dCgpXG4gIGNvbG9yOiBUaGVtZVBhbGV0dGUgPSAnYWNjZW50JztcblxuICBASW5wdXQoKVxuICBpc0FjdGl2ZTogYm9vbGVhbjtcblxuICBASW5wdXQoKVxuICBkaXNhYmxlZDogYm9vbGVhbjtcblxuICBASW5wdXQoKVxuICBjbG9zZUFmdGVyU2VsZWN0aW9uID0gdHJ1ZTtcblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tb3V0cHV0LW9uLXByZWZpeFxuICBAT3V0cHV0KClcbiAgb25GYWJNZW51SXRlbVNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgbnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgbnVtYmVyPigpO1xuXG4gIGxheW91dDogYW55O1xuICBsYXlvdXQyOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmFkanVzdExheW91dCgpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLmRpcmVjdGlvbiAmJiAhY2hhbmdlcy5kaXJlY3Rpb24uZmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMuZGlyZWN0aW9uID0gY2hhbmdlcy5kaXJlY3Rpb24uY3VycmVudFZhbHVlO1xuICAgICAgdGhpcy5hZGp1c3RMYXlvdXQoKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlcy5jb2xvciAmJiAhY2hhbmdlcy5jb2xvci5maXJzdENoYW5nZSkge1xuICAgICAgdGhpcy5jb2xvciA9IGNoYW5nZXMuY29sb3IuY3VycmVudFZhbHVlO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLmZhYkJ1dHRvbnMgJiYgIWNoYW5nZXMuZmFiQnV0dG9ucy5maXJzdENoYW5nZSkge1xuICAgICAgdGhpcy5mYWJCdXR0b25zID0gY2hhbmdlcy5mYWJCdXR0b25zLmN1cnJlbnRWYWx1ZTtcbiAgICB9XG4gIH1cblxuICBhZGp1c3RMYXlvdXQoKSB7XG4gICAgc3dpdGNoICh0aGlzLmRpcmVjdGlvbikge1xuICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgdGhpcy5sYXlvdXQgPSAnY29sdW1uLXJldmVyc2UnO1xuICAgICAgICB0aGlzLmxheW91dDIgPSAnY29sdW1uLXJldmVyc2UnO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgdGhpcy5sYXlvdXQgPSAnY29sdW1uJztcbiAgICAgICAgdGhpcy5sYXlvdXQyID0gJ2NvbHVtbic7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgdGhpcy5sYXlvdXQgPSAncm93LXJldmVyc2UnO1xuICAgICAgICB0aGlzLmxheW91dDIgPSAncm93LXJldmVyc2UnO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICB0aGlzLmxheW91dCA9ICdyb3cnO1xuICAgICAgICB0aGlzLmxheW91dDIgPSAncm93JztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlKCkge1xuICAgIHRoaXMuaXNBY3RpdmUgPSAhdGhpcy5pc0FjdGl2ZTtcbiAgfVxuXG4gIHNlbGVjdEZhYk1lbnUoZmFiOiBNYXRGYWJNZW51KSB7XG4gICAgdGhpcy5vbkZhYk1lbnVJdGVtU2VsZWN0ZWQuZW1pdChmYWIuaWQpO1xuICAgIGlmICh0aGlzLmNsb3NlQWZ0ZXJTZWxlY3Rpb24pIHtcbiAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==