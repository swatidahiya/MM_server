import { __decorate } from 'tslib';
import { EventEmitter, Input, Output, Component, NgModule } from '@angular/core';
import { trigger, state, style, transition, animate, query, stagger, keyframes } from '@angular/animations';
import { MatButtonModule } from '@angular/material/button';
import { CommonModule } from '@angular/common';
import { MatIconModule } from '@angular/material/icon';
import { MatTooltipModule } from '@angular/material/tooltip';
import { FlexLayoutModule } from '@angular/flex-layout';

const speedDialFabAnimations = [
    trigger('fabToggler', [
        state('false', style({
            transform: 'rotate(0deg)'
        })),
        state('true', style({
            transform: 'rotate(225deg)'
        })),
        transition('* <=> *', animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]),
    trigger('fabsStagger', [
        transition('* => *', [
            query(':enter', style({ opacity: 0 }), { optional: true }),
            query(':enter', stagger('40ms', [
                animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)', keyframes([
                    style({ opacity: 0, transform: 'translateY(10px)' }),
                    style({ opacity: 1, transform: 'translateY(0)' }),
                ]))
            ]), { optional: true }),
            query(':leave', animate('200ms cubic-bezier(0.4, 0.0, 0.2, 1)', keyframes([
                style({ opacity: 1 }),
                style({ opacity: 0 }),
            ])), { optional: true })
        ])
    ])
];

let MatFabMenuComponent = class MatFabMenuComponent {
    constructor() {
        this.icon = 'add';
        this.direction = 'top';
        this.color = 'accent';
        this.closeAfterSelection = true;
        // tslint:disable-next-line:no-output-on-prefix
        this.onFabMenuItemSelected = new EventEmitter();
    }
    ngOnInit() {
        this.adjustLayout();
    }
    ngOnChanges(changes) {
        if (changes.direction && !changes.direction.firstChange) {
            this.direction = changes.direction.currentValue;
            this.adjustLayout();
        }
        if (changes.color && !changes.color.firstChange) {
            this.color = changes.color.currentValue;
        }
        if (changes.fabButtons && !changes.fabButtons.firstChange) {
            this.fabButtons = changes.fabButtons.currentValue;
        }
    }
    adjustLayout() {
        switch (this.direction) {
            case 'top':
                this.layout = 'column-reverse';
                this.layout2 = 'column-reverse';
                break;
            case 'bottom':
                this.layout = 'column';
                this.layout2 = 'column';
                break;
            case 'left':
                this.layout = 'row-reverse';
                this.layout2 = 'row-reverse';
                break;
            case 'right':
                this.layout = 'row';
                this.layout2 = 'row';
                break;
        }
    }
    toggle() {
        this.isActive = !this.isActive;
    }
    selectFabMenu(fab) {
        this.onFabMenuItemSelected.emit(fab.id);
        if (this.closeAfterSelection) {
            this.isActive = false;
        }
    }
};
__decorate([
    Input()
], MatFabMenuComponent.prototype, "fabButtons", void 0);
__decorate([
    Input()
], MatFabMenuComponent.prototype, "icon", void 0);
__decorate([
    Input()
], MatFabMenuComponent.prototype, "direction", void 0);
__decorate([
    Input()
], MatFabMenuComponent.prototype, "color", void 0);
__decorate([
    Input()
], MatFabMenuComponent.prototype, "isActive", void 0);
__decorate([
    Input()
], MatFabMenuComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], MatFabMenuComponent.prototype, "closeAfterSelection", void 0);
__decorate([
    Output()
], MatFabMenuComponent.prototype, "onFabMenuItemSelected", void 0);
MatFabMenuComponent = __decorate([
    Component({
        selector: 'mat-fab-menu',
        template: "<div [fxLayout]=\"layout\" class=\"container\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n  <div fxLayoutAlign=\"center\">\n    <button (click)=\"isActive = !isActive\"\n            [color]=\"color\" [disabled]=\"disabled\"\n            [ngClass]=\"{\n    'mat-fab' : !isActive,\n    'mat-mini-fab' : isActive\n  }\"\n            mat-fab>\n      <mat-icon [@fabToggler]=\"{value: isActive}\">{{icon}}</mat-icon> <!-- Animation here -->\n    </button>\n  </div>\n  <div *ngIf=\"isActive\" [@fabsStagger]=\"fabButtons.length\"\n       [fxLayout]=\"layout2\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n    <button (click)=\"selectFabMenu(fab)\"\n            *ngFor=\"let fab of fabButtons\"\n            [color]=\"fab?.color\"\n            [matTooltip]=\"fab?.tooltip\"\n            [matTooltipPosition]=\"fab?.tooltipPosition\"\n            [ngClass]=\"{'fullSVG' : fab?.imgUrl}\"\n            mat-fab>\n      <mat-icon *ngIf=\"fab?.icon\" [color]=\"fab?.iconColor\">{{fab?.icon}}</mat-icon>\n      <img *ngIf=\"fab?.imgUrl\" [src]=\"fab?.imgUrl\" alt=\"icon\">\n    </button>\n  </div>\n</div>\n",
        animations: speedDialFabAnimations,
        styles: [":host{display:block}.fullSVG img{width:100%}.fullSVG ::ng-deep span.mat-button-wrapper{padding:0}.container>div{margin-bottom:5px}.container>div button{margin-bottom:16px}"]
    })
], MatFabMenuComponent);

let MatFabMenuModule = class MatFabMenuModule {
};
MatFabMenuModule = __decorate([
    NgModule({
        declarations: [MatFabMenuComponent],
        imports: [
            CommonModule,
            MatButtonModule,
            MatIconModule,
            MatTooltipModule,
            FlexLayoutModule
        ],
        exports: [MatFabMenuComponent]
    })
], MatFabMenuModule);

/*
 * Public API Surface of fab-menu
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MatFabMenuComponent, MatFabMenuModule, speedDialFabAnimations as Éµa };
//# sourceMappingURL=angular-material-extensions-fab-menu.js.map
