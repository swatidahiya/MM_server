import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { speedDialFabAnimations } from './mat-fab-menu.animations';
let MatFabMenuComponent = class MatFabMenuComponent {
    constructor() {
        this.icon = 'add';
        this.direction = 'top';
        this.color = 'accent';
        this.closeAfterSelection = true;
        // tslint:disable-next-line:no-output-on-prefix
        this.onFabMenuItemSelected = new EventEmitter();
    }
    ngOnInit() {
        this.adjustLayout();
    }
    ngOnChanges(changes) {
        if (changes.direction && !changes.direction.firstChange) {
            this.direction = changes.direction.currentValue;
            this.adjustLayout();
        }
        if (changes.color && !changes.color.firstChange) {
            this.color = changes.color.currentValue;
        }
        if (changes.fabButtons && !changes.fabButtons.firstChange) {
            this.fabButtons = changes.fabButtons.currentValue;
        }
    }
    adjustLayout() {
        switch (this.direction) {
            case 'top':
                this.layout = 'column-reverse';
                this.layout2 = 'column-reverse';
                break;
            case 'bottom':
                this.layout = 'column';
                this.layout2 = 'column';
                break;
            case 'left':
                this.layout = 'row-reverse';
                this.layout2 = 'row-reverse';
                break;
            case 'right':
                this.layout = 'row';
                this.layout2 = 'row';
                break;
        }
    }
    toggle() {
        this.isActive = !this.isActive;
    }
    selectFabMenu(fab) {
        this.onFabMenuItemSelected.emit(fab.id);
        if (this.closeAfterSelection) {
            this.isActive = false;
        }
    }
};
__decorate([
    Input()
], MatFabMenuComponent.prototype, "fabButtons", void 0);
__decorate([
    Input()
], MatFabMenuComponent.prototype, "icon", void 0);
__decorate([
    Input()
], MatFabMenuComponent.prototype, "direction", void 0);
__decorate([
    Input()
], MatFabMenuComponent.prototype, "color", void 0);
__decorate([
    Input()
], MatFabMenuComponent.prototype, "isActive", void 0);
__decorate([
    Input()
], MatFabMenuComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], MatFabMenuComponent.prototype, "closeAfterSelection", void 0);
__decorate([
    Output()
], MatFabMenuComponent.prototype, "onFabMenuItemSelected", void 0);
MatFabMenuComponent = __decorate([
    Component({
        selector: 'mat-fab-menu',
        template: "<div [fxLayout]=\"layout\" class=\"container\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n  <div fxLayoutAlign=\"center\">\n    <button (click)=\"isActive = !isActive\"\n            [color]=\"color\" [disabled]=\"disabled\"\n            [ngClass]=\"{\n    'mat-fab' : !isActive,\n    'mat-mini-fab' : isActive\n  }\"\n            mat-fab>\n      <mat-icon [@fabToggler]=\"{value: isActive}\">{{icon}}</mat-icon> <!-- Animation here -->\n    </button>\n  </div>\n  <div *ngIf=\"isActive\" [@fabsStagger]=\"fabButtons.length\"\n       [fxLayout]=\"layout2\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\n    <button (click)=\"selectFabMenu(fab)\"\n            *ngFor=\"let fab of fabButtons\"\n            [color]=\"fab?.color\"\n            [matTooltip]=\"fab?.tooltip\"\n            [matTooltipPosition]=\"fab?.tooltipPosition\"\n            [ngClass]=\"{'fullSVG' : fab?.imgUrl}\"\n            mat-fab>\n      <mat-icon *ngIf=\"fab?.icon\" [color]=\"fab?.iconColor\">{{fab?.icon}}</mat-icon>\n      <img *ngIf=\"fab?.imgUrl\" [src]=\"fab?.imgUrl\" alt=\"icon\">\n    </button>\n  </div>\n</div>\n",
        animations: speedDialFabAnimations,
        styles: [":host{display:block}.fullSVG img{width:100%}.fullSVG ::ng-deep span.mat-button-wrapper{padding:0}.container>div{margin-bottom:5px}.container>div button{margin-bottom:16px}"]
    })
], MatFabMenuComponent);
export { MatFabMenuComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LWZhYi1tZW51LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLW1hdGVyaWFsLWV4dGVuc2lvbnMvZmFiLW1lbnUvIiwic291cmNlcyI6WyJsaWIvbWF0LWZhYi1tZW51LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZHLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBc0JqRSxJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtJQThCOUI7UUF4QkEsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUdiLGNBQVMsR0FBd0IsS0FBSyxDQUFDO1FBR3ZDLFVBQUssR0FBaUIsUUFBUSxDQUFDO1FBUy9CLHdCQUFtQixHQUFHLElBQUksQ0FBQztRQUUzQiwrQ0FBK0M7UUFFL0MsMEJBQXFCLEdBQWtDLElBQUksWUFBWSxFQUFtQixDQUFDO0lBTTNGLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsU0FBUyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUU7WUFDdkQsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztZQUNoRCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDckI7UUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtZQUMvQyxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO1NBQ3pDO1FBRUQsSUFBSSxPQUFPLENBQUMsVUFBVSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDekQsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQztTQUNuRDtJQUNILENBQUM7SUFFRCxZQUFZO1FBQ1YsUUFBUSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ3RCLEtBQUssS0FBSztnQkFDUixJQUFJLENBQUMsTUFBTSxHQUFHLGdCQUFnQixDQUFDO2dCQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDO2dCQUNoQyxNQUFNO1lBRVIsS0FBSyxRQUFRO2dCQUNYLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO2dCQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztnQkFDeEIsTUFBTTtZQUVSLEtBQUssTUFBTTtnQkFDVCxJQUFJLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQztnQkFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUM7Z0JBQzdCLE1BQU07WUFFUixLQUFLLE9BQU87Z0JBQ1YsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2dCQUNyQixNQUFNO1NBQ1Q7SUFDSCxDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxhQUFhLENBQUMsR0FBZTtRQUMzQixJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QyxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUN2QjtJQUNILENBQUM7Q0FDRixDQUFBO0FBbkZDO0lBREMsS0FBSyxFQUFFO3VEQUNpQjtBQUd6QjtJQURDLEtBQUssRUFBRTtpREFDSztBQUdiO0lBREMsS0FBSyxFQUFFO3NEQUMrQjtBQUd2QztJQURDLEtBQUssRUFBRTtrREFDdUI7QUFHL0I7SUFEQyxLQUFLLEVBQUU7cURBQ1U7QUFHbEI7SUFEQyxLQUFLLEVBQUU7cURBQ1U7QUFHbEI7SUFEQyxLQUFLLEVBQUU7Z0VBQ21CO0FBSTNCO0lBREMsTUFBTSxFQUFFO2tFQUNrRjtBQXpCaEYsbUJBQW1CO0lBTi9CLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxjQUFjO1FBQ3hCLDBtQ0FBMEM7UUFFMUMsVUFBVSxFQUFFLHNCQUFzQjs7S0FDbkMsQ0FBQztHQUNXLG1CQUFtQixDQXNGL0I7U0F0RlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtzcGVlZERpYWxGYWJBbmltYXRpb25zfSBmcm9tICcuL21hdC1mYWItbWVudS5hbmltYXRpb25zJztcbmltcG9ydCB7IFRoZW1lUGFsZXR0ZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xuaW1wb3J0IHsgVG9vbHRpcFBvc2l0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvdG9vbHRpcCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWF0RmFiTWVudSB7XG4gIGlkOiBzdHJpbmcgfCBudW1iZXI7XG4gIGljb24/OiBzdHJpbmc7IC8vIHBsZWFzZSB1c2UgZWl0aGVyIGljb24gb3IgaW1nVXJsXG4gIGljb25Db2xvcj86IFRoZW1lUGFsZXR0ZTtcbiAgaW1nVXJsPzogc3RyaW5nOyAvLyBwbGVhc2UgdXNlIGVpdGhlciBpY29uIG9yIGltZ1VybFxuICB0b29sdGlwPzogc3RyaW5nO1xuICB0b29sdGlwUG9zaXRpb24/OiBUb29sdGlwUG9zaXRpb247XG4gIGNvbG9yPzogVGhlbWVQYWxldHRlO1xufVxuXG5leHBvcnQgdHlwZSBNYXRGYWJNZW51RGlyZWN0aW9uID0gJ3RvcCcgfCAnYm90dG9tJyB8ICdsZWZ0JyB8ICdyaWdodCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21hdC1mYWItbWVudScsXG4gIHRlbXBsYXRlVXJsOiAnbWF0LWZhYi1tZW51LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJ21hdC1mYWItbWVudS5jb21wb25lbnQuc2NzcyddLFxuICBhbmltYXRpb25zOiBzcGVlZERpYWxGYWJBbmltYXRpb25zXG59KVxuZXhwb3J0IGNsYXNzIE1hdEZhYk1lbnVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG5cbiAgQElucHV0KClcbiAgZmFiQnV0dG9uczogTWF0RmFiTWVudVtdO1xuXG4gIEBJbnB1dCgpXG4gIGljb24gPSAnYWRkJztcblxuICBASW5wdXQoKVxuICBkaXJlY3Rpb246IE1hdEZhYk1lbnVEaXJlY3Rpb24gPSAndG9wJztcblxuICBASW5wdXQoKVxuICBjb2xvcjogVGhlbWVQYWxldHRlID0gJ2FjY2VudCc7XG5cbiAgQElucHV0KClcbiAgaXNBY3RpdmU6IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgY2xvc2VBZnRlclNlbGVjdGlvbiA9IHRydWU7XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW91dHB1dC1vbi1wcmVmaXhcbiAgQE91dHB1dCgpXG4gIG9uRmFiTWVudUl0ZW1TZWxlY3RlZDogRXZlbnRFbWl0dGVyPHN0cmluZyB8IG51bWJlcj4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZyB8IG51bWJlcj4oKTtcblxuICBsYXlvdXQ6IGFueTtcbiAgbGF5b3V0MjogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5hZGp1c3RMYXlvdXQoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy5kaXJlY3Rpb24gJiYgIWNoYW5nZXMuZGlyZWN0aW9uLmZpcnN0Q2hhbmdlKSB7XG4gICAgICB0aGlzLmRpcmVjdGlvbiA9IGNoYW5nZXMuZGlyZWN0aW9uLmN1cnJlbnRWYWx1ZTtcbiAgICAgIHRoaXMuYWRqdXN0TGF5b3V0KCk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXMuY29sb3IgJiYgIWNoYW5nZXMuY29sb3IuZmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMuY29sb3IgPSBjaGFuZ2VzLmNvbG9yLmN1cnJlbnRWYWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlcy5mYWJCdXR0b25zICYmICFjaGFuZ2VzLmZhYkJ1dHRvbnMuZmlyc3RDaGFuZ2UpIHtcbiAgICAgIHRoaXMuZmFiQnV0dG9ucyA9IGNoYW5nZXMuZmFiQnV0dG9ucy5jdXJyZW50VmFsdWU7XG4gICAgfVxuICB9XG5cbiAgYWRqdXN0TGF5b3V0KCkge1xuICAgIHN3aXRjaCAodGhpcy5kaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgIHRoaXMubGF5b3V0ID0gJ2NvbHVtbi1yZXZlcnNlJztcbiAgICAgICAgdGhpcy5sYXlvdXQyID0gJ2NvbHVtbi1yZXZlcnNlJztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgIHRoaXMubGF5b3V0ID0gJ2NvbHVtbic7XG4gICAgICAgIHRoaXMubGF5b3V0MiA9ICdjb2x1bW4nO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIHRoaXMubGF5b3V0ID0gJ3Jvdy1yZXZlcnNlJztcbiAgICAgICAgdGhpcy5sYXlvdXQyID0gJ3Jvdy1yZXZlcnNlJztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgdGhpcy5sYXlvdXQgPSAncm93JztcbiAgICAgICAgdGhpcy5sYXlvdXQyID0gJ3Jvdyc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZSgpIHtcbiAgICB0aGlzLmlzQWN0aXZlID0gIXRoaXMuaXNBY3RpdmU7XG4gIH1cblxuICBzZWxlY3RGYWJNZW51KGZhYjogTWF0RmFiTWVudSkge1xuICAgIHRoaXMub25GYWJNZW51SXRlbVNlbGVjdGVkLmVtaXQoZmFiLmlkKTtcbiAgICBpZiAodGhpcy5jbG9zZUFmdGVyU2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICB9XG59XG4iXX0=