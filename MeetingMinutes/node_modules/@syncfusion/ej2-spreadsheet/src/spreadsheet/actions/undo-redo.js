import { performUndoRedo, updateUndoRedoCollection, enableToolbarItems, completeAction } from '../common/index';
import { setActionData, getBeforeActionData, updateAction } from '../common/index';
import { selectRange, clearUndoRedoCollection } from '../common/index';
import { getRangeFromAddress, getRangeIndexes, getSheet, workbookEditOperation } from '../../workbook/index';
import { getCell, setCell, getSheetIndex } from '../../workbook/index';
/**
 * UndoRedo module allows to perform undo redo functionalities.
 */
var UndoRedo = /** @class */ (function () {
    function UndoRedo(parent) {
        this.undoCollection = [];
        this.redoCollection = [];
        this.isUndo = false;
        this.undoRedoStep = 100;
        this.parent = parent;
        this.addEventListener();
    }
    UndoRedo.prototype.setActionData = function (options) {
        var sheet = this.parent.getActiveSheet();
        var address;
        var cells = [];
        var cutCellDetails = [];
        var args = options.args;
        var eventArgs = args.eventArgs;
        switch (args.action) {
            case 'format':
                address = getRangeIndexes(args.eventArgs.range);
                break;
            case 'clipboard':
                var copiedInfo = eventArgs.copiedInfo;
                address = getRangeIndexes(getRangeFromAddress(eventArgs.pastedRange));
                if (copiedInfo.isCut) {
                    cutCellDetails = this.getCellDetails(copiedInfo.range, getSheet(this.parent, copiedInfo.sId - 1));
                }
                break;
            case 'beforeSort':
                address = getRangeIndexes(args.eventArgs.range);
                if (address[0] === address[2] && (address[2] - address[0]) === 0) { //if selected range is a single cell 
                    address[0] = 0;
                    address[1] = 0;
                    address[2] = sheet.usedRange.rowIndex - 1;
                    address[3] = sheet.usedRange.colIndex;
                }
                break;
            case 'beforeCellSave':
                address = getRangeIndexes(eventArgs.address);
                break;
        }
        cells = this.getCellDetails(address, sheet);
        this.beforeActionData = { cellDetails: cells, cutCellDetails: cutCellDetails };
    };
    UndoRedo.prototype.getBeforeActionData = function (args) {
        args.beforeDetails = this.beforeActionData;
    };
    UndoRedo.prototype.performUndoRedo = function (args) {
        var undoRedoArgs = args.isUndo ? this.undoCollection.pop() : this.redoCollection.pop();
        this.isUndo = args.isUndo;
        if (undoRedoArgs) {
            switch (undoRedoArgs.action) {
                case 'cellSave':
                case 'format':
                case 'sorting':
                    undoRedoArgs = this.performOperation(undoRedoArgs);
                    break;
                case 'clipboard':
                    undoRedoArgs = this.undoForClipboard(undoRedoArgs);
                    break;
                case 'resize':
                    undoRedoArgs = this.undoForResize(undoRedoArgs);
                    break;
            }
            args.isUndo ? this.redoCollection.push(undoRedoArgs) : this.undoCollection.push(undoRedoArgs);
            if (this.undoCollection.length > this.undoRedoStep) {
                this.undoCollection.splice(0, 1);
            }
            if (this.redoCollection.length > this.undoRedoStep) {
                this.redoCollection.splice(0, 1);
            }
            this.updateUndoRedoIcons();
            var completeArgs = Object.assign({}, undoRedoArgs.eventArgs);
            completeArgs.requestType = args.isUndo ? 'undo' : 'redo';
            delete completeArgs.beforeActionData;
            if (!args.isPublic) {
                this.parent.notify(completeAction, { eventArgs: completeArgs, action: 'undoRedo' });
            }
        }
    };
    UndoRedo.prototype.updateUndoRedoCollection = function (options) {
        var actionList = ['clipboard', 'format', 'sorting', 'cellSave', 'resize', 'resizeToFit'];
        var action = options.args.action;
        if (actionList.indexOf(action) === -1 && !options.isPublic) {
            return;
        }
        var eventArgs = options.args.eventArgs;
        if (action === 'clipboard' || action === 'sorting' || action === 'format' || action === 'cellSave') {
            var beforeActionDetails = { beforeDetails: { cellDetails: [] } };
            this.parent.notify(getBeforeActionData, beforeActionDetails);
            eventArgs.beforeActionData = beforeActionDetails.beforeDetails;
        }
        this.undoCollection.push(options.args);
        this.redoCollection = [];
        if (this.undoCollection.length > this.undoRedoStep) {
            this.undoCollection.splice(0, 1);
        }
        this.updateUndoRedoIcons();
    };
    UndoRedo.prototype.clearUndoRedoCollection = function () {
        this.undoCollection = [];
        this.redoCollection = [];
        this.updateUndoRedoIcons();
    };
    UndoRedo.prototype.updateUndoRedoIcons = function () {
        this.parent.notify(enableToolbarItems, [{ items: [this.parent.element.id + '_undo'], enable: this.undoCollection.length > 0 }]);
        this.parent.notify(enableToolbarItems, [{ items: [this.parent.element.id + '_redo'], enable: this.redoCollection.length > 0 }]);
    };
    UndoRedo.prototype.undoForClipboard = function (args) {
        var eventArgs = args.eventArgs;
        var address = eventArgs.pastedRange.split('!');
        var range = getRangeIndexes(address[1]);
        var sheetIndex = getSheetIndex(this.parent, address[0]);
        var sheet = getSheet(this.parent, sheetIndex);
        var copiedInfo = eventArgs.copiedInfo;
        var actionData = eventArgs.beforeActionData;
        var isRefresh = this.checkRefreshNeeded(sheetIndex);
        if (this.isUndo) {
            if (copiedInfo.isCut) {
                var cells = actionData.cutCellDetails;
                this.updateCellDetails(cells, getSheet(this.parent, copiedInfo.sId - 1), copiedInfo.range, isRefresh);
            }
            this.updateCellDetails(actionData.cellDetails, sheet, range, isRefresh);
        }
        else {
            updateAction(args, this.parent, copiedInfo.isCut);
        }
        if (isRefresh) {
            this.parent.notify(selectRange, range);
        }
        return args;
    };
    UndoRedo.prototype.undoForResize = function (args) {
        var eventArgs = args.eventArgs;
        if (eventArgs.isCol) {
            var temp = eventArgs.oldWidth;
            eventArgs.oldWidth = eventArgs.width;
            eventArgs.width = temp;
        }
        else {
            var temp = eventArgs.oldHeight;
            eventArgs.oldHeight = eventArgs.height;
            eventArgs.height = temp;
        }
        updateAction(args, this.parent);
        return args;
    };
    UndoRedo.prototype.performOperation = function (args) {
        var eventArgs = args.eventArgs;
        var address = (args.action === 'cellSave') ? eventArgs.address.split('!') : eventArgs.range.split('!');
        var range = getRangeIndexes(address[1]);
        var sheetIndex = getSheetIndex(this.parent, address[0]);
        var sheet = getSheet(this.parent, sheetIndex);
        var actionData = eventArgs.beforeActionData;
        var isRefresh = this.checkRefreshNeeded(sheetIndex);
        if (this.isUndo) {
            this.updateCellDetails(actionData.cellDetails, sheet, range, isRefresh);
        }
        else {
            updateAction(args, this.parent);
        }
        if (isRefresh) {
            this.parent.notify(selectRange, range);
        }
        return args;
    };
    UndoRedo.prototype.getCellDetails = function (address, sheet) {
        var cells = [];
        var cell;
        for (var i = address[0]; i <= address[2]; i++) {
            for (var j = address[1]; j <= address[3]; j++) {
                cell = getCell(i, j, sheet);
                cells.push({
                    rowIndex: i, colIndex: j, format: cell ? cell.format : null,
                    style: cell ? cell.style : null, value: cell ? cell.value : '', formula: cell ? cell.formula : ''
                });
            }
        }
        return cells;
    };
    UndoRedo.prototype.updateCellDetails = function (cells, sheet, range, isRefresh) {
        var len = cells.length;
        for (var i = 0; i < len; i++) {
            setCell(cells[i].rowIndex, cells[i].colIndex, sheet, {
                value: cells[i].value, format: cells[i].format,
                style: cells[i].style, formula: cells[i].formula
            });
            if (cells[i].formula) {
                this.parent.notify(workbookEditOperation, {
                    action: 'updateCellValue', address: [cells[i].rowIndex, cells[i].colIndex, cells[i].rowIndex,
                        cells[i].colIndex], value: cells[i].formula
                });
            }
        }
        if (isRefresh) {
            this.parent.serviceLocator.getService('cell').refreshRange(range);
        }
    };
    UndoRedo.prototype.checkRefreshNeeded = function (sheetIndex) {
        var isRefresh = true;
        if (sheetIndex + 1 !== this.parent.activeSheetTab) {
            this.parent.activeSheetTab = sheetIndex + 1;
            this.parent.dataBind();
            isRefresh = false;
        }
        return isRefresh;
    };
    UndoRedo.prototype.addEventListener = function () {
        this.parent.on(performUndoRedo, this.performUndoRedo, this);
        this.parent.on(updateUndoRedoCollection, this.updateUndoRedoCollection, this);
        this.parent.on(setActionData, this.setActionData, this);
        this.parent.on(getBeforeActionData, this.getBeforeActionData, this);
        this.parent.on(clearUndoRedoCollection, this.clearUndoRedoCollection, this);
    };
    UndoRedo.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(performUndoRedo, this.performUndoRedo);
            this.parent.off(updateUndoRedoCollection, this.updateUndoRedoCollection);
            this.parent.off(setActionData, this.setActionData);
            this.parent.off(getBeforeActionData, this.getBeforeActionData);
            this.parent.off(clearUndoRedoCollection, this.clearUndoRedoCollection);
        }
    };
    /**
     * Destroy undo redo module.
     */
    UndoRedo.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the undo redo module name.
     */
    UndoRedo.prototype.getModuleName = function () {
        return 'undoredo';
    };
    return UndoRedo;
}());
export { UndoRedo };
