import { inView } from '../common/index';
import { hasTemplate, createHyperlinkElement } from '../common/index';
import { renderFilterCell } from '../common/index';
import { getColumnHeaderText, getCellAddress, getRangeIndexes } from '../../workbook/common/index';
import { getCell, skipDefaultValue, isHiddenRow } from '../../workbook/base/index';
import { getRowHeight, setRowHeight } from '../../workbook/base/index';
import { addClass, attributes, getNumberDependable, extend, compile, isNullOrUndefined } from '@syncfusion/ej2-base';
import { getFormattedCellObject, applyCellFormat, workbookFormulaOperation, setCellFormat } from '../../workbook/common/event';
import { getTypeFromFormat } from '../../workbook/index';
import { checkIsFormula } from '../../workbook/common/util';
/**
 * CellRenderer class which responsible for building cell content.
 * @hidden
 */
var CellRenderer = /** @class */ (function () {
    function CellRenderer(parent) {
        this.parent = parent;
        this.element = this.parent.createElement('td');
        this.th = this.parent.createElement('th', { className: 'e-header-cell' });
        this.tableRow = parent.createElement('tr', { className: 'e-row' });
    }
    CellRenderer.prototype.renderColHeader = function (index) {
        var headerCell = this.th.cloneNode();
        attributes(headerCell, { 'role': 'columnheader', 'aria-colindex': (index + 1).toString(), 'tabindex': '-1' });
        headerCell.innerHTML = getColumnHeaderText(index + 1);
        return headerCell;
    };
    CellRenderer.prototype.renderRowHeader = function (index) {
        var headerCell = this.element.cloneNode();
        addClass([headerCell], 'e-header-cell');
        attributes(headerCell, { 'role': 'rowheader', 'tabindex': '-1' });
        headerCell.innerHTML = (index + 1).toString();
        return headerCell;
    };
    CellRenderer.prototype.render = function (args) {
        var td = this.element.cloneNode();
        td.className = 'e-cell';
        attributes(td, { 'role': 'gridcell', 'aria-colindex': (args.colIdx + 1).toString(), 'tabindex': '-1' });
        td.innerHTML = this.processTemplates(args.cell, args.rowIdx, args.colIdx);
        this.updateCell(args.rowIdx, args.colIdx, td, args.cell, args.lastCell, args.row, args.hRow, args.isHeightCheckNeeded);
        if (!hasTemplate(this.parent, args.rowIdx, args.colIdx, this.parent.activeSheetTab - 1)) {
            this.parent.notify(renderFilterCell, { td: td, rowIndex: args.rowIdx, colIndex: args.colIdx });
        }
        var evtArgs = {
            cell: args.cell, element: td, address: args.address
        };
        this.parent.trigger('beforeCellRender', evtArgs);
        this.updateRowHeight({
            rowIdx: args.rowIdx,
            cell: evtArgs.element,
            lastCell: args.lastCell,
            rowHgt: 20,
            row: args.row,
            hRow: args.hRow
        });
        return evtArgs.element;
    };
    CellRenderer.prototype.updateCell = function (rowIdx, colIdx, td, cell, lastCell, row, hRow, isHeightCheckNeeded, isRefresh) {
        if (cell && cell.formula && !cell.value) {
            var isFormula = checkIsFormula(cell.formula);
            var eventArgs = {
                action: 'refreshCalculate',
                value: cell.formula,
                rowIndex: rowIdx,
                colIndex: colIdx,
                isFormula: isFormula
            };
            this.parent.notify(workbookFormulaOperation, eventArgs);
        }
        var formatArgs = {
            type: cell && getTypeFromFormat(cell.format),
            value: cell && cell.value, format: cell && cell.format ? cell.format : 'General',
            formattedText: cell && cell.value, onLoad: true, isRightAlign: false, cell: cell
        };
        if (cell) {
            this.parent.notify(getFormattedCellObject, formatArgs);
        }
        if (!isNullOrUndefined(td)) {
            this.parent.refreshNode(td, {
                type: formatArgs.type,
                result: formatArgs.formattedText,
                curSymbol: getNumberDependable(this.parent.locale, 'USD'),
                isRightAlign: formatArgs.isRightAlign,
                value: formatArgs.value || ''
            });
        }
        var style = {};
        if (cell && cell.style) {
            if (cell.style.properties) {
                style = skipDefaultValue(cell.style, true);
            }
            else {
                style = cell.style;
            }
        }
        if (Object.keys(style).length || Object.keys(this.parent.commonCellStyle).length || lastCell) {
            if (isRefresh) {
                this.removeStyle(td);
                this.parent.notify(setCellFormat, { style: style, range: getCellAddress(rowIdx, colIdx) });
            }
            else {
                this.parent.notify(applyCellFormat, {
                    style: extend({}, this.parent.commonCellStyle, style), rowIdx: rowIdx, colIdx: colIdx, cell: td,
                    lastCell: lastCell, row: row, hRow: hRow,
                    isHeightCheckNeeded: isHeightCheckNeeded, manualUpdate: false
                });
            }
        }
        else {
            if (isRefresh) {
                this.removeStyle(td);
            }
        }
        if (cell && cell.hyperlink && !hasTemplate(this.parent, rowIdx, colIdx, this.parent.activeSheetTab - 1)) {
            var address = void 0;
            if (typeof (cell.hyperlink) === 'string') {
                address = cell.hyperlink;
                if (address.indexOf('http://') !== 0 && address.indexOf('https://') !== 0 && address.indexOf('ftp://') !== 0) {
                    cell.hyperlink = address.indexOf('www.') === 0 ? 'http://' + address : address;
                }
            }
            else {
                address = cell.hyperlink.address;
                if (address.indexOf('http://') !== 0 && address.indexOf('https://') !== 0 && address.indexOf('ftp://') !== 0) {
                    cell.hyperlink.address = address.indexOf('www.') === 0 ? 'http://' + address : address;
                }
            }
            var hArgs = { cell: cell, td: td, rowIdx: rowIdx, colIdx: colIdx };
            this.parent.notify(createHyperlinkElement, hArgs);
        }
    };
    CellRenderer.prototype.processTemplates = function (cell, rowIdx, colIdx) {
        var sheet = this.parent.getActiveSheet();
        var rangeSettings = sheet.rangeSettings;
        var range;
        for (var j = 0, len = rangeSettings.length; j < len; j++) {
            if (rangeSettings[j].template) {
                range = getRangeIndexes(rangeSettings[j].range.length ? rangeSettings[j].range : rangeSettings[j].startCell);
                if (range[0] <= rowIdx && range[1] <= colIdx && range[2] >= rowIdx && range[3] >= colIdx) {
                    if (cell) {
                        return this.compileCellTemplate(rangeSettings[j].template);
                    }
                    else {
                        if (!getCell(rowIdx, colIdx, sheet, true)) {
                            return this.compileCellTemplate(rangeSettings[j].template);
                        }
                    }
                }
            }
        }
        return '';
    };
    CellRenderer.prototype.compileCellTemplate = function (template) {
        var templateString;
        if (template.trim().indexOf('#') === 0) {
            templateString = document.querySelector(template).innerHTML.trim();
        }
        else {
            templateString = template;
        }
        var compiledStr = compile(templateString);
        return compiledStr({}, null, null, '', true)[0].outerHTML;
    };
    CellRenderer.prototype.updateRowHeight = function (args) {
        if (args.cell && args.cell.children.length) {
            var clonedCell = args.cell.cloneNode(true);
            this.tableRow.appendChild(clonedCell);
        }
        if (args.lastCell && this.tableRow.childElementCount) {
            var sheet = this.parent.getActiveSheet();
            var tableRow = args.row || this.parent.getRow(args.rowIdx);
            var previouseHeight = getRowHeight(sheet, args.rowIdx);
            var rowHeight = this.getRowHeightOnInit();
            if (rowHeight > previouseHeight) {
                tableRow.style.height = rowHeight + "px";
                if (sheet.showHeaders) {
                    (args.hRow || this.parent.getRow(args.rowIdx, this.parent.getRowHeaderTable())).style.height =
                        rowHeight + "px";
                }
                setRowHeight(sheet, args.rowIdx, rowHeight);
            }
            this.tableRow.innerHTML = '';
        }
    };
    CellRenderer.prototype.getRowHeightOnInit = function () {
        var tTable = this.parent.createElement('table', { className: 'e-table e-test-table' });
        var tBody = tTable.appendChild(this.parent.createElement('tbody'));
        tBody.appendChild(this.tableRow);
        this.parent.element.appendChild(tTable);
        var height = Math.round(this.tableRow.getBoundingClientRect().height);
        this.parent.element.removeChild(tTable);
        return height < 20 ? 20 : height;
    };
    CellRenderer.prototype.removeStyle = function (element) {
        if (element.style.length) {
            element.removeAttribute('style');
        }
    };
    /** @hidden */
    CellRenderer.prototype.refreshRange = function (range) {
        var sheet = this.parent.getActiveSheet();
        var cRange = range.slice();
        if (inView(this.parent, cRange, true)) {
            for (var i = cRange[0]; i <= cRange[2]; i++) {
                if (isHiddenRow(sheet, i)) {
                    continue;
                }
                for (var j = cRange[1]; j <= cRange[3]; j++) {
                    var cell = this.parent.getCell(i, j);
                    if (cell) {
                        this.updateCell(i, j, cell, getCell(i, j, sheet), false, null, null, true, cell ? true : false);
                        this.parent.notify(renderFilterCell, { td: cell, rowIndex: i, colIndex: j });
                    }
                }
            }
        }
    };
    return CellRenderer;
}());
export { CellRenderer };
