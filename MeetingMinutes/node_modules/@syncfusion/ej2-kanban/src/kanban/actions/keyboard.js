import { KeyboardEvents, addClass, removeClass, classList, closest } from '@syncfusion/ej2-base';
import * as cls from '../base/css-constant';
/**
 * Drag and Drop module is used to perform card actions.
 * @hidden
 */
var Keyboard = /** @class */ (function () {
    /**
     * Constructor for keyboard module
     * @private
     */
    function Keyboard(parent) {
        this.keyConfigs = {
            firstCardSelection: '36',
            lastCardSelection: '35',
            upArrow: '38',
            downArrow: '40',
            rightArrow: '39',
            leftArrow: '37',
            swimlaneExpandAll: 'ctrl+40',
            swimlaneCollapseAll: 'ctrl+38',
            selectedSwimlaneExpand: 'alt+40',
            selectedSwimlaneCollapse: 'alt+38',
            selectedColumnCollapse: 'ctrl+37',
            selectedColumnExpand: 'ctrl+39',
            multiSelectionByUpArrow: 'shift+38',
            multiSelectionByDownArrow: 'shift+40',
            multiSelectionByLeftArrow: 'shift+37',
            multiSelectionByRightArrow: 'shift+39',
            shiftTab: 'shift+tab',
            enter: '13',
            tab: 'tab'
        };
        this.parent = parent;
        this.parent.element.tabIndex = this.parent.element.tabIndex === -1 ? 0 : this.parent.element.tabIndex;
        this.keyboardModule = new KeyboardEvents(this.parent.element, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keydown'
        });
    }
    Keyboard.prototype.keyActionHandler = function (e) {
        var selectedCard = this.parent.element.querySelectorAll("." + cls.CARD_CLASS + "." + cls.CARD_SELECTION_CLASS).item(0);
        if (!selectedCard && !closest(document.activeElement, "." + cls.ROOT_CLASS)) {
            return;
        }
        switch (e.action) {
            case 'upArrow':
            case 'downArrow':
            case 'multiSelectionByUpArrow':
            case 'multiSelectionByDownArrow':
                this.processUpDownArrow(e.action, selectedCard);
                break;
            case 'rightArrow':
            case 'leftArrow':
            case 'multiSelectionByLeftArrow':
            case 'multiSelectionByRightArrow':
                this.processLeftRightArrow(e, selectedCard);
                break;
            case 'firstCardSelection':
            case 'lastCardSelection':
                this.processCardSelection(e.action, selectedCard);
                break;
            case 'swimlaneExpandAll':
            case 'swimlaneCollapseAll':
            case 'selectedSwimlaneExpand':
            case 'selectedSwimlaneCollapse':
                this.processSwimlaneExpandCollapse(e.action);
                break;
            case 'selectedColumnExpand':
            case 'selectedColumnCollapse':
                this.processColumnExpandcollapse(e.action, selectedCard);
                break;
            case 'enter':
                this.processEnter(e, selectedCard);
                break;
            case 'tab':
            case 'shiftTab':
                this.processTab(e.action, selectedCard);
                break;
        }
    };
    Keyboard.prototype.processCardSelection = function (action, selectedCard) {
        if (selectedCard) {
            removeClass([selectedCard], cls.CARD_SELECTION_CLASS);
            var selection = this.parent.actionModule.selectionArray;
            selection.splice(selection.indexOf(selectedCard.getAttribute('data-id')), 1);
        }
        var cards = [].slice.call(this.parent.element.querySelectorAll('.' + cls.CARD_CLASS));
        var element = action === 'firstCardSelection' ? cards[0] : cards[cards.length - 1];
        this.parent.actionModule.cardSelection(element, false, false);
    };
    Keyboard.prototype.processLeftRightArrow = function (e, selectedCard) {
        var activeElement = document.activeElement;
        if (!selectedCard && activeElement) {
            if (activeElement.classList.contains(cls.COLUMN_EXPAND_CLASS) || activeElement.classList.contains(cls.COLUMN_COLLAPSE_CLASS)) {
                this.parent.actionModule.columnExpandCollapse(activeElement);
            }
            else if (activeElement.classList.contains(cls.SWIMLANE_ROW_EXPAND_CLASS) ||
                activeElement.classList.contains(cls.SWIMLANE_ROW_COLLAPSE_CLASS)) {
                this.parent.actionModule.rowExpandCollapse(e);
            }
        }
        if (selectedCard) {
            this.processMoveCards(e.action, this.parent.actionModule.lastCardSelection);
        }
    };
    Keyboard.prototype.processUpDownArrow = function (action, selectedCard) {
        var card;
        var isShift = false;
        if (selectedCard) {
            var key = closest(this.parent.actionModule.lastCardSelection, '.' + cls.CONTENT_CELLS_CLASS).getAttribute('data-key');
            var cardSelector = "." + cls.CONTENT_CELLS_CLASS + "[data-key=\"" + key + "\"] ." + cls.CARD_CLASS;
            var allCards = [].slice.call(this.parent.element.querySelectorAll(cardSelector));
            var curId = this.parent.actionModule.lastCardSelection.getAttribute('data-id');
            var curIndex = this.getCardId(allCards).indexOf(curId);
            isShift = ((action === 'multiSelectionByUpArrow' || action === 'multiSelectionByDownArrow')
                && this.parent.cardSettings.selectionType === 'Multiple');
            var index = (action === 'upArrow' || action === 'multiSelectionByUpArrow') ? curIndex - 1 : curIndex + 1;
            card = allCards[index];
        }
        else if (action === 'downArrow' && document.activeElement) {
            if (document.activeElement.classList.contains(cls.SWIMLANE_ROW_EXPAND_CLASS)) {
                var parentEle = closest(document.activeElement, '.' + cls.SWIMLANE_ROW_CLASS);
                card = parentEle.nextElementSibling.querySelector('.' + cls.CARD_CLASS);
            }
            else if (document.activeElement.classList.contains(cls.ROOT_CLASS) && !this.parent.swimlaneSettings.keyField) {
                card = this.parent.element.querySelector('.' + cls.CARD_CLASS);
            }
        }
        else if (action === 'upArrow' && document.activeElement &&
            document.activeElement.classList.contains(cls.SWIMLANE_ROW_EXPAND_CLASS)) {
            var parentEle = closest(document.activeElement, '.' + cls.SWIMLANE_ROW_CLASS);
            var allCards = [].slice.call(parentEle.previousElementSibling.querySelectorAll('.' + cls.CARD_CLASS));
            card = (allCards).slice(-1)[0];
        }
        this.parent.actionModule.cardSelection(card, false, isShift);
        this.parent.element.focus();
    };
    Keyboard.prototype.processColumnExpandcollapse = function (action, selectedCard) {
        var key = selectedCard.getAttribute('data-key');
        var cell = this.parent.element.querySelector("." + cls.HEADER_CELLS_CLASS + "[data-key=\"" + key + "\"]");
        if (cell.classList.contains(cls.HEADER_ROW_TOGGLE_CLASS)) {
            if ((cell.classList.contains(cls.COLLAPSED_CLASS) && action === 'selectedColumnCollapse') ||
                (!cell.classList.contains(cls.COLLAPSED_CLASS) && action === 'selectedColumnExpand')) {
                return;
            }
            else {
                this.parent.actionModule.columnExpandCollapse(cell);
            }
        }
    };
    Keyboard.prototype.processSwimlaneExpandCollapse = function (action) {
        if (!this.parent.swimlaneSettings.keyField) {
            return;
        }
        var className = "." + cls.CARD_CLASS + "." + cls.CARD_SELECTION_CLASS;
        if (action === 'swimlaneExpandAll' || action === 'swimlaneCollapseAll') {
            className = "." + cls.CONTENT_ROW_CLASS + "." + cls.SWIMLANE_ROW_CLASS;
        }
        var element = [].slice.call(this.parent.element.querySelectorAll(className));
        var collapseCount = this.parent.element.querySelectorAll(className + '.' + cls.COLLAPSED_CLASS).length;
        if ((action === 'swimlaneCollapseAll' && element.length - collapseCount === 0) ||
            (action === 'swimlaneExpandAll' && element.length - collapseCount === element.length)) {
            return;
        }
        element.forEach(function (ele) {
            if (ele.classList.contains(cls.CARD_CLASS)) {
                ele = closest(ele, '.' + cls.CONTENT_ROW_CLASS).previousElementSibling;
                if ((!ele.classList.contains(cls.COLLAPSED_CLASS) && action === 'selectedSwimlaneExpand') ||
                    (ele.classList.contains(cls.COLLAPSED_CLASS) && action === 'selectedSwimlaneCollapse')) {
                    return;
                }
            }
            if (ele.classList.contains(cls.COLLAPSED_CLASS)) {
                removeClass([ele, ele.nextElementSibling], cls.COLLAPSED_CLASS);
                classList(ele.querySelector('.' + cls.ICON_CLASS), [cls.SWIMLANE_ROW_EXPAND_CLASS], [cls.SWIMLANE_ROW_COLLAPSE_CLASS]);
            }
            else if (!ele.classList.contains(cls.COLLAPSED_CLASS)) {
                addClass([ele, ele.nextElementSibling], cls.COLLAPSED_CLASS);
                classList(ele.querySelector('.' + cls.ICON_CLASS), [cls.SWIMLANE_ROW_COLLAPSE_CLASS], [cls.SWIMLANE_ROW_EXPAND_CLASS]);
            }
        });
    };
    Keyboard.prototype.getCardId = function (cardElements) {
        var curCardId = [];
        cardElements.forEach(function (el) { return curCardId.push(el.getAttribute('data-id')); });
        return curCardId;
    };
    Keyboard.prototype.processNextRow = function (row) {
        for (var i = 0; i < row.childElementCount; i++) {
            var nextCell = row.children[i];
            var nextCellCards = [].slice.call(nextCell.querySelectorAll('.' + cls.CARD_CLASS));
            if (nextCellCards.length > 0) {
                this.parent.actionModule.cardSelection(nextCellCards[0], false, false);
                if (row.classList.contains(cls.COLLAPSED_CLASS)) {
                    this.processSwimlaneExpandCollapse('selectedSwimlaneExpand');
                }
                break;
            }
        }
    };
    Keyboard.prototype.processPreviousRow = function (row) {
        for (var i = (row.childElementCount - 1); i >= 0; i--) {
            var nextCell = row.children[i];
            var nextCellCards = [].slice.call(nextCell.querySelectorAll('.' + cls.CARD_CLASS));
            if (nextCellCards.length > 0) {
                this.parent.actionModule.cardSelection(nextCellCards.slice(-1)[0], false, false);
                break;
            }
        }
    };
    Keyboard.prototype.processCards = function (isSame, nextCellCards, curIndex, action) {
        if (isSame) {
            var isShift = ((action === 'multiSelectionByRightArrow' || action === 'multiSelectionByLeftArrow')
                && this.parent.cardSettings.selectionType === 'Multiple');
            var processCard = nextCellCards[curIndex] || nextCellCards.slice(-1)[0];
            this.parent.actionModule.cardSelection(processCard, false, isShift);
        }
    };
    Keyboard.prototype.processEnter = function (e, selectedCard) {
        var element = (e.target);
        if (element.classList.contains(cls.HEADER_ICON_CLASS)) {
            this.parent.actionModule.columnExpandCollapse(e);
        }
        if (element.classList.contains(cls.SWIMLANE_ROW_EXPAND_CLASS) || element.classList.contains(cls.SWIMLANE_ROW_COLLAPSE_CLASS)) {
            this.parent.actionModule.rowExpandCollapse(e);
        }
        if (selectedCard) {
            this.parent.actionModule.cardSelection(selectedCard, false, false);
        }
    };
    Keyboard.prototype.processTab = function (action, selectedCard) {
        if (selectedCard) {
            var target = closest(selectedCard, '.' + cls.CONTENT_ROW_CLASS);
            var tabTarget = action === 'tab' ? target.previousElementSibling : target.nextElementSibling;
            if (tabTarget) {
                tabTarget.querySelector("." + cls.SWIMLANE_ROW_COLLAPSE_CLASS + ",." + cls.SWIMLANE_ROW_EXPAND_CLASS).focus();
            }
            removeClass([selectedCard], cls.CARD_SELECTION_CLASS);
        }
    };
    Keyboard.prototype.processMoveCards = function (action, card) {
        var nextCell;
        var nextCellCards;
        var curCell = closest(card, '.' + cls.CONTENT_CELLS_CLASS);
        var curCellCards = [].slice.call(curCell.querySelectorAll('.' + cls.CARD_CLASS));
        var curRow = closest(curCell, '.' + cls.CONTENT_ROW_CLASS);
        var curIndex = this.getCardId(curCellCards).indexOf(card.getAttribute('data-id'));
        if (action === 'rightArrow' || action === 'multiSelectionByRightArrow') {
            if (curCell.cellIndex === (curRow.childElementCount - 1) && this.parent.swimlaneSettings.keyField
                && action !== 'multiSelectionByRightArrow') {
                if (curIndex < (this.getCardId(curCellCards).length - 1)) {
                    this.parent.actionModule.cardSelection(this.parent.actionModule.lastCardSelection.nextElementSibling, false, false);
                }
                else if (curRow.rowIndex !== (this.parent.element.querySelectorAll('.' + cls.CONTENT_ROW_CLASS).length - 1)) {
                    var row = this.parent.element.querySelector("." + cls.CONTENT_ROW_CLASS + ":nth-child(" + (curRow.rowIndex + 3) + ")");
                    this.processNextRow(row);
                }
            }
            else {
                var isSame = false;
                for (var i = curCell.cellIndex + 1; i < curRow.children.length; i++) {
                    nextCell = curRow.children[i];
                    nextCellCards = [].slice.call(nextCell.querySelectorAll('.' + cls.CARD_CLASS));
                    if (nextCellCards.length > 0) {
                        isSame = true;
                        break;
                    }
                }
                this.processCards(isSame, nextCellCards, curIndex, action);
            }
        }
        else {
            if (curCell.cellIndex === 0 && this.parent.swimlaneSettings.keyField && action !== 'multiSelectionByLeftArrow') {
                if (curIndex > 0) {
                    this.parent.actionModule.cardSelection(this.parent.actionModule.lastCardSelection.previousElementSibling, false, false);
                }
                else if (curRow.rowIndex > 1) {
                    var className = "." + cls.CONTENT_ROW_CLASS + ":nth-child(" + (curRow.rowIndex - 1) + "):not(." + cls.COLLAPSED_CLASS + ")";
                    var targetRow = this.parent.element.querySelector(className);
                    if (targetRow) {
                        this.processPreviousRow(targetRow);
                    }
                }
            }
            else {
                var isSame = false;
                for (var i = (curCell.cellIndex - 1); i >= 0; i--) {
                    nextCell = curRow.children[i];
                    nextCellCards = [].slice.call(nextCell.querySelectorAll('.' + cls.CARD_CLASS));
                    if (nextCellCards.length > 0) {
                        isSame = true;
                        break;
                    }
                    if (i === 0 && this.parent.swimlaneSettings.keyField) {
                        var row = this.parent.element.querySelector("." + cls.CONTENT_ROW_CLASS + ":nth-child(" + (curRow.rowIndex - 1) + ")");
                        this.processPreviousRow(row);
                    }
                }
                this.processCards(isSame, nextCellCards, curIndex, action);
            }
        }
    };
    /**
     * Get module name.
     */
    Keyboard.prototype.getModuleName = function () {
        return 'keyboard';
    };
    /**
     * To destroy the keyboard module.
     * @return {void}
     * @private
     */
    Keyboard.prototype.destroy = function () {
        this.keyboardModule.destroy();
    };
    return Keyboard;
}());
export { Keyboard };
