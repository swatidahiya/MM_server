// Generated by CoffeeScript 1.10.0
(function() {
  var slice = [].slice;

  module.exports = function($log, $rootScope) {
    'ngInject';
    var EventAdapter, registerEventListener, registerEventListeners;
    registerEventListener = function(moduleObject, reverseArgs, eventType, eventName) {
      var callback;
      if (typeof moduleObject.addListener !== 'function') {
        throw new Exception("Unable to register events, the module doesn't have an add listener function.");
      }
      callback = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (!$rootScope.$$phase) {
          return $rootScope.$apply(function() {
            return $rootScope.$broadcast.apply($rootScope, [eventName].concat(slice.call(args)));
          });
        } else {
          return $rootScope.$broadcast.apply($rootScope, [eventName].concat(slice.call(args)));
        }
      };
      if (reverseArgs) {
        moduleObject.addListener(callback, eventName);
      } else {
        moduleObject.addListener(eventName, callback);
      }
      return callback;
    };
    registerEventListeners = function(mod, reverseArgs, eventMaps) {
      var callbackEventMap, callbackEventObj, eventMap, eventName, eventType, i, len;
      callbackEventMap = [];
      for (i = 0, len = eventMaps.length; i < len; i++) {
        eventMap = eventMaps[i];
        callbackEventObj = {};
        for (eventType in eventMap) {
          eventName = eventMap[eventType];
          callbackEventObj[eventName] = registerEventListener(mod, reverseArgs, eventType, eventName);
        }
        callbackEventMap.push(callbackEventObj);
      }
      return callbackEventMap;
    };
    EventAdapter = {
      wireUpEvents: function() {
        var eventMaps, moduleObject;
        moduleObject = arguments[0], eventMaps = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return registerEventListeners(moduleObject, false, eventMaps);
      },
      wireUpEventsReverse: function() {
        var eventMaps, moduleObject;
        moduleObject = arguments[0], eventMaps = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return registerEventListeners(moduleObject, true, eventMaps);
      },
      clearEvents: function(moduleObject, callbackEventMap) {
        var callback, eventMap, eventName, i, len, results;
        results = [];
        for (i = 0, len = callbackEventMap.length; i < len; i++) {
          eventMap = callbackEventMap[i];
          results.push((function() {
            var results1;
            results1 = [];
            for (eventName in eventMap) {
              callback = eventMap[eventName];
              results1.push(moduleObject.removeListener(eventName, callback));
            }
            return results1;
          })());
        }
        return results;
      }
    };
    return EventAdapter;
  };

}).call(this);
